%!TEX root = paper.tex
<<knitr-load, echo=FALSE, include=FALSE>>=
if (Sys.getenv("RSTUDIO") == "1") {
    setwd("/home/sopi/Documents/Side_projects/behaviour-analysis/")
} else {
   opts_chunk$set(
    fig.path="./figure/",
    fig.keep='all',
    dev=c('tikz'), #dev='pdf',c('tikz', 'svg'),
    dev.args=list(pointsize=8, timestamp = FALSE),
    echo=FALSE,
    external=FALSE,
    tidy=FALSE)

  ## Make sure that TikZDevice is used for measuring size of latex labels
  options(device = function(...) tikzDevice::tikz(tempfile(), ...))
}

source("./scripts/libraries.R", chdir=TRUE)

folder_out <- "./results/07-06-22_16-08-09/CLOSURES/results/"

############################################## UTILS ###############################################  

compute_evolution <- function(before, after) {
  if (before == 0) {return(0)}
  return (round(((after - before) / before) * 100,  digits = 1))
}

load_data_file <- function(filename) {
  row_names <- c("Benchmark", "Before", "After", "Variation", "Type")
  as.data.frame(t(read.csv(filename, sep="\n", strip.white = TRUE, header=FALSE, row.names = row_names)))
}

# add check.names, otherwise it replaces the special characters by ...
load_split_file <- function(filename) {
  read.csv(filename,sep=";", strip.white = TRUE, header=TRUE, fill=TRUE, check.names=FALSE)
}

load_all_tables <- function (folder, type, call_or_site, is_transitions=FALSE) { 
  result <- NULL
  folder <- file.path(folder_out, type, call_or_site)
  files <- sort(list.files(folder))
  
  for (f in files) {
    if (is_transitions) {
      data <- load_split_file(file.path(folder, f))
      
      if (empty(data)) {
        data[1,1] <- str_split(f, "-", simplify = TRUE)[1,1]
      }
      result <- dplyr::union_all(data, result)
      result[is.na(result)] = 0
    }
    else {
      data <- load_data_file(file.path(folder, f))
      result <- rbind(data, result)
    }
  }
  result$Benchmark <- revalue(result$Benchmark, 
                      c("AsciidoctorConvertSmall"  = "ADConvert",
                      "AsciidoctorLoadFileSmall" = "ADLoadFile",        
                      "BlogRailsRoutesTwoRoutesTwoRequests" = "BlogRails",             
                      "ChunkyDecodePngImagePass" = "ChunkyDec",                      
                      "FannkuchRedux" = "Fannkuch",                                          
                      "ImageDemoConv" = "ImgDemoConv",
                      "ImageDemoSobel" = "ImgDemoSobel",                 
                      "LeeBench" = "Lee",       
                      "SinatraHello" = "Sinatra"))
    result$Transition <- revalue(result$Transition, 
                      c("AsciidoctorConvertSmall"  = "ADConvert",
                      "AsciidoctorLoadFileSmall" = "ADLoadFile",        
                      "BlogRailsRoutesTwoRoutesTwoRequests" = "BlogRails",             
                      "ChunkyDecodePngImagePass" = "ChunkyDec",                      
                      "FannkuchRedux" = "Fannkuch",                                          
                      "ImageDemoConv" = "ImgDemoConv",
                      "ImageDemoSobel" = "ImgDemoSobel",                 
                      "LeeBench" = "Lee",       
                      "SinatraHello" = "Sinatra"))
  return(result)
}

rearrange_table <- function(df) {
 spec <- tidyr::build_wider_spec(
  df, 
  names_from = Type, 
  values_from = c(Before, After, Variation), 
  names_glue = "{Type}_{.value}")
  
  spec <- spec %>% 
    arrange(factor(.name, levels = c("MONO_Before", "MONO_After", "MONO_Variation", "POLY_Before", "POLY_After", "POLY_Variation", "MEGA_Before", "MEGA_After", "MEGA_Variation") ))
  
  return(tidyr::pivot_wider_spec(df, spec))
}

# Here we'll collapse together: all the PSDUtil, PSDImage, PSDCompose and ChunkyColor
combine_similar_benchmarks <- function(df, benchmark_prefix) {
  table_mean <- df %>%
      filter(str_detect(Benchmark, benchmark_prefix)) %>%
      dplyr::mutate(across(!Benchmark, as.numeric)) %>%
      dplyr::summarise(across(!Benchmark, mean)) %>%
      dplyr::mutate_if(is.numeric, round, 1) %>%
      as.data.frame()
  row.names(table_mean) <- "Mean"
  
#  table_mean[1,]<-paste("â‰ˆ", table_mean[1,], sep="")
  
  table_mean$Benchmark <- paste(benchmark_prefix,"*", sep="")
  row.names(table_mean) <- NULL
  
  df <- df %>% 
    filter(!str_detect(Benchmark, benchmark_prefix))
    
  df <- rbind(df, table_mean)
  
  return(df)
}

build_nice_latex_table <- function(df, label_text = NULL) {
# trash the data BUT looks exactly how it should for the paper
# see https://stackoverflow.com/questions/13984470/possible-to-create-latex-multicolumns-in-xtable/28420723#28420723
names(df)[2] = names(df)[5] = names(df)[8] = "Before"
names(df)[3] = names(df)[6] = names(df)[9] = "After"
names(df)[4] = names(df)[7] = names(df)[10] = "Variation"
beauty <- kableExtra::kable(df, booktabs = TRUE, linesep = "", label = label_text) %>%
  kableExtra::row_spec(nrow(df), bold = TRUE, background = "#AFAFAF") %>%
  kableExtra::add_header_above(c("", "MONO"=3, "POLY"=3, "MEGA"=3)) %>%
  kableExtra::kable_styling(latex_options = c("hold_position","scale_down", "striped"))
return(beauty)
}

build_nice_latex_table_no_mega <- function(df, label_text = NULL, caption_text = "", header_std = c("", "MONO"=2, "POLY"=2)) {
# trash the data BUT looks exactly how it should for the paper
# see https://stackoverflow.com/questions/13984470/possible-to-create-latex-multicolumns-in-xtable/28420723#28420723
names(df)[2] = names(df)[4] = "Before"
names(df)[3] = names(df)[5] = "Variation \n (in %)"
# names(df)[4] = names(df)[7] = "Variation"
beauty <- kableExtra::kable(df, booktabs = TRUE, linesep = "", label = label_text, align = "r", caption = caption_text) %>%
  #kableExtra::row_spec(nrow(df), bold = TRUE, background = "#AFAFAF") %>%
  kableExtra::add_header_above(header_std) %>%
  kableExtra::kable_styling(latex_options = c("hold_position","scale_down", "striped"))
return(beauty)
}

add_total_row <- function(df) {
  df <- df %>% dplyr::mutate(across(!Benchmark, as.numeric))
  df <- purrr::map_df(df, prettyNum ,big.interval = 3,  big.mark = ",")
  mono_before <- sum(df$MONO_Before)
  mono_after <- sum(df$MONO_After)
  poly_before <- sum(df$POLY_Before)
  poly_after <- sum(df$POLY_After)
  mega_before <- sum(df$MEGA_Before)
  mega_after <- sum(df$MEGA_After)
  vec <- list("TOTAL", mono_before, mono_after, compute_evolution(mono_before, mono_after), poly_before, poly_after, compute_evolution(poly_before, poly_after), mega_before, mega_after, compute_evolution(mega_before, mega_after))
  df[nrow(df) + 1,] <- vec
  return(df)
}

add_total_row_split <- function(df) {
  df <- df %>% dplyr::mutate(across(!Benchmark, as.numeric))
  mono_mono <- sum(df$`MONO->MONO (=)`)
  mono_mono_diff <- sum(df$`MONO->MONO (!=)`)
  poly_mono <- sum(df$`POLY->MONO`)
  vec <- list("TOTAL", mono_mono, mono_mono_diff, poly_mono)
  df[nrow(df) + 1,] <- vec
  return(df)
}

switch_last_two <- function(df) {
  last <- df[nrow(df),]
  second_last <- df[nrow(df) -1,]
  df[nrow(df),] <- second_last
  df[nrow(df) -1,] <- last
  return(df)
}

apply_big_numbers <- function(df) {
   df <-   df %>% 
      dplyr::mutate(across(!Benchmark, as.numeric)) %>%
      purrr::map_df(prettyNum ,big.interval = 3,  big.mark = ",")
   return(df)
}

remove_after_column <- function(df) {
  df <- df %>%
    select(-contains("After"))
  return(df)
}

divide_the_tables <- function(df) {
  df_mono <- df %>%
    filter(POLY_Before == 0)
  
  df_poly <- df %>%
  filter(POLY_Before != 0)
  
  return (list(df_mono, df_poly))
}

merge_the_mono <- function(df1, df2) {
  calls <- df1 %>% 
    select(Benchmark, MONO_Before) %>%
    rename("Num.Calls" = "MONO_Before")
  
  call_sites <- df2 %>% 
    select(Benchmark, MONO_Before) %>%
    rename("Num.Call.Sites" = "MONO_Before")
  
  result <- join(calls, call_sites)
  return(result)
}

############################################## MERGED TABLES ############################################### 

data_tp_calls <- load_all_tables(folder_out, "Poly")

# and rearranged
table_data_tp_calls <- rearrange_table(data_tp_calls) %>% dplyr::arrange(Benchmark)


############################################## LATEX COMMAND GENERATION ##############################################

@
\def\SplitCallSitesPoly{%
<<SplitCallSitesPoly, echo=FALSE, results='asis'>>=
print(latex_split_call_sites_poly)
  @
  }%
  
\def\SplitCallsPoly{%
<<SplitCallsPoly, echo=FALSE, results='asis'>>=
print(latex_split_calls_poly)
  @
  }%

\def\SplitMono{%
<<SplitMono, echo=FALSE, results='asis'>>=
print(latex_split_mono)
  @
  }%

\def\TPCallSitesPoly{%
<<TPCallSitesPoly, echo=FALSE, results='asis'>>=
print(latex_tp_call_sites_poly)
  @
  }%

\def\TPCallsPoly{%
<<TPCallsPoly, echo=FALSE, results='asis'>>=
print(latex_tp_calls_poly)
  @
  }%

\def\TPMono{%
<<TPMono, echo=FALSE, results='asis'>>=
print(latex_tp_mono)
  @
  }%
  
\def\CallSites{%
<<CallSites, echo=FALSE, results='asis'>>=
print(latex_tp_call_sites_poly)
print(latex_split_call_sites_poly)
  @
  }%
  
\def\SplittingTransitions{%
<<SplittingTransitions, echo=FALSE, results='asis'>>=
print(latex_data_split_transitions)
  @
  }%