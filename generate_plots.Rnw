source("./scripts/libraries.R", chdir=TRUE)

args = commandArgs(trailingOnly=TRUE)
benchmark_name = args[1]
folder_out = args[2]
filename = args[3]

# benchmark_name = "MailBench"
# folder_out = "../results/latest"
# filename = "../results/latest/parsed_MailBench.log"

col_names <- c("Symbol", "Original.Receiver", "Source.Section", "CT.Address", "Builtin?", "Observed.Receiver")
data <- fread(filename, header = FALSE, sep="\t", col.names = col_names)
data$Benchmark <- benchmark_name

data <- data[!(`Builtin?` %like% "PROC|LAMBDA|block")]
data <- data[, na.omit(.SD)][, Call.ID := 1:.N][, lapply(.SD, str_trim)]

gc()

data[ , 
      `:=`(Num.Receiver.Observed = n_distinct(Observed.Receiver), 
           Num.Receiver.Original = n_distinct(Original.Receiver)), by=list(Source.Section, Symbol, Benchmark)]

data[ , 
      `:=`(Split.Num.Receiver.Observed = n_distinct(Observed.Receiver)), by=list(Source.Section, Symbol, CT.Address, Benchmark)]

data[ , "Lookup.Status" := (fcase(
  (Num.Receiver.Original == 1), "MONO",
  ((Num.Receiver.Original  > 1) & (Num.Receiver.Original  <= 8)), "POLY",
  (Num.Receiver.Original > 8), "MEGA"))]

data[ , "TP.Lookup.Status" := (fcase(
  (Num.Receiver.Observed == 1), "MONO",
  ((Num.Receiver.Observed  > 1) & (Num.Receiver.Observed  <= 8)), "POLY",
  (Num.Receiver.Observed > 8), "MEGA"))]

data[ , "Split.Lookup.Status" := (fcase(
  (Split.Num.Receiver.Observed == 1), "MONO",
  ((Split.Num.Receiver.Observed  > 1) & (Split.Num.Receiver.Observed  <= 8)), "POLY",
  (Split.Num.Receiver.Observed > 8), "MEGA"))]


############################################## MANUAL INSPECTION ############################################## 

  # to filter out by the number of targets and only keep polymoprhic call-sites
data <- data[TP.Lookup.Status != "MONO"]
data[ , "N.Calls" := uniqueN(.SD) , by = list(Source.Section, Symbol, Observed.Receiver)]
setorderv(data, c("N.Calls"), order=-1L)

table_optimizable <- unique(data, by = c("Source.Section", "Symbol") )
table_optimizable[, Rank := 1:.N]

############################################## PLOT GENERATION - FACET ##############################################

# this generates a faceted plot, each facet being the target adress(es), for a couple {Source.Section, symbol}
plot_calls <- function(ss, symb) {
  filtered_data <- data %>% filter(Source.Section == ss & Symbol == symb)
  split_callSite <- strsplit(ss, "/", fixed=TRUE)
  p <- ggplot(data = filtered_data, aes(x=as.numeric(as.character(Call.ID)), y=Observed.Receiver, shape=Observed.Receiver, size=Observed.Receiver)) + geom_point(size = 2, alpha = 0.4) 
  p <- p + xlab("Call ID") + ylab("Target")  + ggtitle(paste(filtered_data$Symbol, ", in ", tail(split_callSite[[1]], 1)))
    p <- p  + theme_bw() + theme(legend.position = "none")+ theme(text = element_text(size=40))
 return (p)
}

f <- function(row) {
  ss <- row['Source.Section']
  symbol <- row['Symbol']
  rank <- row['Rank'] # prefix the plot name by the rank for an easier analysis
  p_ <- plot_calls(ss, symbol)
  ss <- gsub("*/","_",ss) # replace the / in the name otherwise the file cannot be created
  ss <- str_trunc(ss, 25, side='left')
  ggsave(p_, path=folder_out, filename=paste(rank,ss,symbol,"plot.png", sep="_"), height = 300, width = 500, units="mm")
}

# 1 line in the table_optimizable corresponds to the most executed observed receiver per target
# We use the table_optimizable as input to know which target to generate a plot for
# we apply the plot_calls method to each of these target
if (nrow(table_optimizable) != 0) {
  apply(head(table_optimizable, 30), 1, f) 
}
