source("./scripts/libraries.R", chdir=TRUE)

args = commandArgs(trailingOnly=TRUE)
benchmark_name = args[1]
folder_out = file.path(getwd(),args[2],"results","Plots")
filename = args[3]

writeLines(paste("[INFO] Generate the csv for",benchmark_name,"located at",filename,". Generate the csv at",folder_out))
  
data <- load_data_file(filename)
data <- as_tibble(data)


############################################## MAIN TABLE ############################################## 
# remove any invalid data (extra logging info ignored by parsing)
data <- clean_data_file(data, FALSE)

gc()

# Table summarizing the amount of call sites being mono, poly, mega
total_w_splitting <- add_number_receivers(data, c(Call.Site.Target, "Benchmark"))
total_wo_splitting <- add_number_receivers(data, c(Call.Site, "Benchmark"))

total_w_splitting <- add_lookup_status_per_call(total_w_splitting)
total_wo_splitting <- add_lookup_status_per_call(total_wo_splitting)

gc()

############################################## MANUAL INSPECTION ############################################## 

  # to filter out by the number of targets and only keep polymoprhic call-sites 
  polymorphic_call_sites <- total_wo_splitting %>%
    filter(Num.Receiver.Original >= 2) %>%
    filter(Num.Receiver.Observed >= 2)
  
  # distribution for each call site, pick the most represented receiver by call-site
  # Add: Weight.Receiver - the weight of each receiver over the total amount of calls for this target {Source.Section, Symbol, CT.Address}
  # Add: Num.Calls.Per.SS - Number of calls per target{Source.Section, Symbol, CT.Address}
  distrib_per_call_site <- polymorphic_call_sites %>%
    group_by(Source.Section, Symbol, Observed.Receiver) %>%
    dplyr::summarise(n_calls = n()) %>%
    dplyr::mutate(Weight.Receiver = round(n_calls/sum(n_calls),3)*100) %>%
    group_by(Source.Section, Symbol) %>%
    dplyr::arrange(desc(Weight.Receiver), .by_group = TRUE) %>%
    dplyr::mutate(Num.Calls.Per.SS = sum(n_calls)) 
  
  # Selection of most optimizable poly|megamorphic call sites (lots of calls)
  table_optimizable <- distrib_per_call_site %>%
    group_by(Source.Section, Symbol) %>%
    dplyr::arrange(desc(Num.Calls.Per.SS)) %>%
    slice(1) %>% # keep the most executed receiver per target {Source.Section, Symbol, CT.Address} 
    ungroup() %>%
    dplyr::arrange(desc(Num.Calls.Per.SS)) %>%
    tibble::rowid_to_column(var="Rank")
  
  # to get an idea of the most executed call-sites
  most_executed <- total_wo_splitting %>%
    group_by(Source.Section, Symbol) %>%
    dplyr::summarise(Num.Calls = n()) %>%
    slice(1) %>%
    ungroup %>%
    dplyr::arrange(desc(Num.Calls), Source.Section, Symbol)
  
############################################## PLOT GENERATION - FACET ##############################################

# this generates a faceted plot, each facet being the target adress(es), for a couple {Source.Section, symbol}
plot_calls <- function(ss, symb) {
  filtered_data <- polymorphic_call_sites %>% filter(Source.Section == ss & Symbol == symb)
  p <- ggplot(data = filtered_data, aes(x=as.numeric(as.character(Call.ID)), y=Observed.Receiver, color=Observed.Receiver)) + geom_point(size = 0.5, alpha = 0.4) 
  p <- p + xlab("Call ID") + ylab("Target") + theme(legend.position = "none") + ggtitle(paste("Selector: ",filtered_data$Symbol, ", in source: ", filtered_data$Source.Section))
    p <- p + theme(text = element_text(size=10)) 
 return (p)
}


f <- function(row) {
  ss <- row['Source.Section']
  symbol <- row['Symbol']
  rank <- row['Rank'] # prefix the plot name by the rank for an easier analysis
  p_ <- plot_calls(ss, symbol)
  ss <- gsub("*/","_",ss) # replace the / in the name otherwise the file cannot be created
  ss <- str_trunc(ss, 25, side='left')
  ggsave(p_, path=now, filename=paste(rank,ss,symbol,"plot.png", sep="_"), height = 300, width = 500, units="mm")
}

# create the directory
now <- format(Sys.time(), "%b%d-%Y_%X")
now <- paste(folder_out,paste(benchmark_name,now,sep="_"),sep="/")
dir.create(now)

# 1 line in the table_optimizable corresponds to the most executed observed receiver per target
# We use the table_optimizable as input to know which target to generate a plot for
# we apply the plot_calls method to each of these target
if (nrow(polymorphic_call_sites) != 0) {
  apply(head(table_optimizable, 30), 1, f) 
}