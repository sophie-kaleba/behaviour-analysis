%!TEX root = paper.tex
<<knitr-load, echo=FALSE, include=FALSE>>=
if (Sys.getenv("RSTUDIO") == "1") {
    setwd("/home/sopi/Documents/Side_projects/behaviour-analysis/")
} else {
   opts_chunk$set(
    fig.path="./figure/",
    fig.keep='all',
    dev=c('tikz'), #dev='pdf',c('tikz', 'svg'),
    dev.args=list(pointsize=8, timestamp = FALSE),
    echo=FALSE,
    external=FALSE,
    tidy=FALSE)

  ## Make sure that TikZDevice is used for measuring size of latex labels
  options(device = function(...) tikzDevice::tikz(tempfile(), ...))
}

source("./scripts/libraries.R", chdir=TRUE)

data <- load_data_file("./results/NBody_Apr04-2022_13:24:26_all/parsed_NBody.mylog")
benchmark_name <- "NBody"

split_truffle <- read.csv("./truffle_split_targets_NBODY.split", sep=",", row.names = NULL, col.names=c("Target","Times.Splitted", "Call.Type"))  
split_truffle <- split_truffle %>%
    filter(Call.Type == "Block") %>%
  janitor::adorn_totals("row") 

############################################## READ-ME ##############################################
# INVARIANTS TO BE CHECKED
# 1- A call-site is identified by a unique pair: {Source.Section, Symbol}
# 2- A target is identified by a unique triple: {Source.Section, Symbol, Receiver}
# 3- For one call-site, the number of original receivers is necessarily greater or equal to the number of observed receivers
# 4- There is at least one target per call-site (so the number of targets >= number of call-sites)

# COLUMN DESCRIPTION
# Source.Section - the lexical location of the call. This is somewhat not 100% reliable, so we pair it with:
# Symbol - the name of the symbol at this location, to turn it into a unique identifier for the location
# CT.Address - the hashcode of the target executed at this call-site. Needed to spot whether splitting happened
# Observed.Receiver - class of the receiver of this call, after lookup 

# VARIABLE DESCRIPTION
# Num.Call.Sites - The number of call-sites executed in this run (as in number of distinct pair of Source.Section, Symbol)
# Num.Targets.Observed - The total number of different call-targets in this run (after lookup)

############################################## MAIN TABLE ############################################## 

# remove any invalid data (extra logging info ignored by parsing)
data <- clean_data_file(data, TRUE)
data$Symbol <- "yield|call|[]"

# Add info on the number of call targets per call-site (taking splittng into account)
# Add: Num.Receiver.Observed, Num.Receiver.Original
# TODO - for now we distinguish by call target by default, so the 2 tables will be equal
total_w_splitting <- add_number_receivers(data, Call.Site.Target)
total_wo_splitting <- add_number_receivers(data, Call.Site)

############################################## VARIABLES ############################################## 
# Mainly used for latex macro and checking invariants

Num.Call.Sites <- count_things(data, Call.Site)
Num.Call.Sites.Incl.Splitted <-count_things(data, Call.Site.Target)

Num.Targets.Observed <- count_things(total_w_splitting, c(Call.Site.Target, "Num.Receiver.Observed"))
testit::assert("There should not be more call-sites than splitted call sites", Num.Call.Sites.Incl.Splitted >= Num.Call.Sites) 

############################################## POLYMORPHISM ##############################################

num_target_observed <- compute_num_target_details(total_wo_splitting, Call.Site, "Observed.Receiver")
num_target_observed_w_splitting <- compute_num_target_details(total_w_splitting, Call.Site.Target,  "Observed.Receiver")
total_w_splitting <- add_lookup_status_per_call(total_w_splitting)

############################################## SPLITTING ##############################################    

summary_splitting <- generate_splitting_summary(total_w_splitting, c(Call.Site.Target, "Call.ID", "Observed.Receiver"), Call.Site) %>%
  dplyr::arrange(desc(Frequency)) %>%
  tibble::rowid_to_column(var="Rank")

num_calls_splitted <- total_w_splitting %>%
  group_by_at(Call.Site) %>%
  dplyr::mutate(Times.Splitted = n_distinct(CT.Address) - 1) %>%
  filter(Times.Splitted > 0)

Num.Splitted.Call.Sites <- count_things(num_calls_splitted, Call.Site)

transition_data <- analyse_splitting_transitions(total_w_splitting, benchmark_name, Call.Site, Call.Site.Target)

Number.Splits <- nrow(transition_data)
splitting_transition_summary_sites <- summarise_transition_targets(transition_data)
splitting_transition_summary_sites_real <- summarise_transition_sites(transition_data)
# get frequency according to number of splits
splitting_transition_summary_frequency <- summarise_transition_frequency(transition_data, Number.Splits)

############################################## MANUAL INSPECTION ############################################## 

# to filter out by the number of targets and only keep polymoprhic call-sites 
polymorphic_call_sites <- total_w_splitting %>%
  filter(Num.Receiver.Observed >= 2)

# distribution for each call site, pick the most represented receiver by call-site
# Add: Weight.Receiver - the weight of each receiver over the total amount of calls for this target {Source.Section, Symbol, CT.Address}
# Add: Num.Calls.Per.SS - Number of calls per target{Source.Section, Symbol, CT.Address}
distrib_per_call_site <- polymorphic_call_sites %>%
  group_by(Source.Section, Symbol, CT.Address, Observed.Receiver) %>%
  dplyr::summarise(n_calls = n()) %>%
  dplyr::mutate(Weight.Receiver = round(n_calls/sum(n_calls),3)*100) %>%
  group_by(Source.Section, Symbol, CT.Address) %>%
  dplyr::arrange(desc(Weight.Receiver), .by_group = TRUE) %>%
  dplyr::mutate(Num.Calls.Per.SS = sum(n_calls)) 

# Selection of most optimizable poly|megamorphic call sites (lots of calls)
table_optimizable <- distrib_per_call_site %>%
  group_by(Source.Section, Symbol) %>%
  dplyr::arrange(desc(Num.Calls.Per.SS)) %>%
  slice(1) %>% # keep the most executed receiver per target {Source.Section, Symbol, CT.Address} 
  ungroup() %>%
  dplyr::arrange(desc(Num.Calls.Per.SS)) %>%
  tibble::rowid_to_column(var="Rank")

# to get an idea of the most executed call-sites
most_executed <- total_w_splitting %>%
  group_by(Source.Section, Symbol, CT.Address) %>%
  dplyr::summarise(Num.Calls = n()) %>%
  slice(1) %>%
  ungroup %>%
  dplyr::arrange(desc(Num.Calls), Source.Section, Symbol, CT.Address)
  


############################################## PLOT GENERATION - FACET ##############################################

# this generates a faceted plot, each facet being the target adress(es), for a couple {Source.Section, symbol}
plot_calls <- function(ss, symb) {
  filtered_data <- polymorphic_call_sites %>% filter(Source.Section == ss && Symbol == symb)
  p <- ggplot(data = filtered_data, aes(x=as.numeric(as.character(Call.ID)), y=Observed.Receiver, color=Observed.Receiver)) + geom_point(size = 0.5, alpha = 0.4) 
  p <- p + facet_wrap( ~CT.Address, scales = "free", ncol = 3) + xlab("Call ID") + ylab("Target") + theme(legend.position = "none") + ggtitle(paste("Selector: ",filtered_data$Symbol, ", in source: ", filtered_data$Source.Section))
    p <- p + theme(text = element_text(size=10)) 
 return (p)
}


f <- function(row) {
  ss <- row['Source.Section']
  symbol <- row['Symbol']
  rank <- row['Rank'] # prefix the plot name by the rank for an easier analysis
  p_ <- plot_calls(ss, symbol)
  ss <- gsub("*/","_",ss) # replace the / in the name otherwise the file cannot be created
  ggsave(p_, path=now, filename=paste(rank,ss,symbol,"plot.png", sep="_"), height = 300, width = 500, units="mm")
}

# create the directory
now <- format(Sys.time(), "%b%d-%Y_%X")
now <- paste("results",paste("BLOCK",benchmark_name,now,sep="_"),sep="/")
dir.create(now)

# 1 line in the table_optimizable corresponds to the most executed observed receiver per target
# We use the table_optimizable as input to know which target to generate a plot for
# we apply the plot_calls method to each of these target
if (nrow(polymorphic_call_sites) != 0) {
  apply(head(table_optimizable, 30), 1, f) 
}

# this folder is now hlding the latest ran analysis
createLink(link="latest", target=now, overwrite=TRUE)

############################################## TABLES ###############################################    

## TABLE GENERATION
# Distribution of call targets
distrib_cache_size_obs_no_splitting <- xtable(num_target_observed, caption = "Distribution of call-targets (Observed) - Splitting ignored")
distrib_cache_size_obs_no_splitting <- autoformat(distrib_cache_size_obs_no_splitting, zap = getOption("digits"))

distrib_cache_size_obs_splitting <- xtable(num_target_observed_w_splitting, caption = "Distribution of call-targets (Observed) - Splitting acknowledged")
distrib_cache_size_obs_splitting <- autoformat(distrib_cache_size_obs_splitting, zap = getOption("digits"))

# Hottest call-sites
hottest_mega_ct_table <- xtable(table_optimizable, caption = "Hottest megamorphic call sites")
hottest_mega_ct_table <- autoformat(hottest_mega_ct_table, zap = getOption("digits"))

hottest_30mega_ct_table <- xtable(head(table_optimizable,30), caption = "Hottest megamorphic call sites")
hottest_30mega_ct_table <- autoformat(hottest_30mega_ct_table, zap = getOption("digits"))

most_executed <- xtable(head(most_executed, 35), caption = "Most executed call-sites")
most_executed <- autoformat(most_executed, zap = getOption("digits"))

# Splitting 
if (nrow(summary_splitting) != 0) {
  splitting_table <- xtable(head(summary_splitting %>% dplyr:: mutate_at("Source.Section", str_trunc, 25, side='center'), 30), type = "latex")
  splitting_table <- autoformat(splitting_table, zap = getOption("digits"))

  effect_splitting_table <- xtable(effect_splitting_summary %>% dplyr:: mutate_at("Source.Section", str_trunc, 25, side='center'), type = "latex")
  effect_splitting_table <- autoformat(effect_splitting_table, zap = getOption("digits"))
  # TODO
  distrib_split_per_ct_table <- xtable(summary_splitting, caption = "Distribution of splits per target")
  distrib_split_per_ct_table <- autoformat(distrib_split_per_ct_table, zap = getOption("digits"))
}

## TABLE SAVING
table_folder <- paste(now,"summary_tables",sep="/")
dir.create(table_folder)
print(xtable(distrib_cache_size_obs_splitting, type = "latex"), include.rownames=FALSE, tabular.environment="longtable",floating=FALSE, file = paste(table_folder,"call_target_distrib.tex", sep="/"))
print(xtable(hottest_mega_ct_table, type = "latex"), include.rownames=FALSE, file = paste(table_folder,"hottest_megamorphic_call_sites.tex", sep="/"))
if (nrow(summary_splitting) != 0) {
  print(xtable(distrib_split_per_ct_table, type = "latex"), include.rownames=FALSE, tabular.environment="longtable",floating=FALSE, file = paste(table_folder,"splits_per_target.tex", sep="/"))
  print(xtable(summary_splitting_detail_turbo %>% dplyr:: mutate_at("Source.Section", str_trunc, 25, side='center'), type = "latex"), include.rownames=FALSE, tabular.environment="longtable", floating=FALSE,  file = paste(table_folder,"splitting_details.tex", sep="/"))
}

############################################## VARIBALES GENERATION ##############################################

is.integer0 <- function(x)
{
  return (is.integer(x) && length(x) == 0L)
}

convert_as_integer <- function(df) {
  result <- 0
  if (!is.integer0(df$Cumulative)) {
    result <- head(df$Cumulative,1)
  } 
  return(result)
}

Num.Polymorphic.SplittingObserved <- convert_as_integer(distrib_cache_size_obs_splitting %>% filter(Num.Receiver.Observed >= 2 && Num.Receiver.Observed < 9))
Num.Polymorphic.NoSplittingObserved <- convert_as_integer(distrib_cache_size_obs_no_splitting %>% filter(Num.Receiver.Observed >= 2 && Num.Receiver.Observed < 9))

Num.Megamorphic.SplittingObserved <- convert_as_integer(distrib_cache_size_obs_splitting %>% filter(Num.Receiver.Observed > 9))
Num.Megamorphic.NoSplittingObserved <- convert_as_integer(distrib_cache_size_obs_no_splitting %>% filter(Num.Receiver.Observed > 9))

############################################## LATEX COMMAND GENERATION ##############################################

@
\def\CacheDistribObservedSplitting{%
<<CacheDistribObservedSplitting, echo=FALSE, results='asis'>>=
print(xtable(distrib_cache_size_obs_splitting, type = "latex"), include.rownames=FALSE, tabular.environment="longtable",floating=FALSE)
  @
  }%

\def\CacheDistribObservedNoSplitting{%
<<CacheDistribObservedNoSplitting, echo=FALSE, results='asis'>>=
print(xtable(distrib_cache_size_obs_no_splitting, type = "latex"), include.rownames=FALSE, tabular.environment="longtable",floating=FALSE)
  @
  }%

  \def\HottestMegamorphic{%
<<HottestMegamorphic, echo=FALSE, results='asis'>>=
print(xtable(hottest_mega_ct_table, type = "latex"), include.rownames=FALSE)
    @
  }%
  
  \def\SuperHottestMegamorphic{%
<<SuperHottestMegamorphic, echo=FALSE, results='asis'>>=
print(xtable(hottest_30mega_ct_table, type = "latex"), include.rownames=FALSE)
    @
  }%
  
  \def\MostExecutedCallSite{%
<<MostExecutedCallSite, echo=FALSE, results='asis'>>=
print(xtable(most_executed, type = "latex"), include.rownames=TRUE, tabular.environment="longtable",floating=FALSE)
      @
  }%
  
\newcommand{\BenchmarkName}{$\Sexpr{benchmark_name}$\xspace}
\newcommand{\NumIterations}{$\Sexpr{number_iterations}$\xspace}
\newcommand{\NumInnerIterations}{$\Sexpr{number_inner_iterations}$\xspace}
\newcommand{\LogFilename}{\Sexpr{filename}\xspace}
\newcommand{\Hihaho}{\Sexpr{hihaho}\xspace}
\newcommand{\Yuria}{\Sexpr{yuria}\xspace}

\newcommand{\NumberCallSites}{$\Sexpr{Num.Call.Sites}$\xspace}
\newcommand{\NumberCallSitesSplitting}{$\Sexpr{Num.Call.Sites.Incl.Splitted}$\xspace}
\newcommand{\NumberTargetsObserved}{$\Sexpr{Num.Targets.Observed}$\xspace}

\newcommand{\NumberCalls}{$\Sexpr{nrow(data)}$\xspace}
\newcommand{\NumOfSplittedTargets}{$\Sexpr{nrow(summary_splitting)}$\xspace}

\newcommand{\NumPolymorphicSplittingObserved}{$\Sexpr{Num.Polymorphic.SplittingObserved}$\xspace}
\newcommand{\NumPolymorphicNoSplittingObserved}{$\Sexpr{Num.Polymorphic.NoSplittingObserved}$\xspace}

\newcommand{\NumMegamorphicSplittingObserved}{$\Sexpr{Num.Megamorphic.SplittingObserved}$\xspace}
\newcommand{\NumMegamorphicNoSplittingObserved}{$\Sexpr{Num.Megamorphic.NoSplittingObserved}$\xspace}






