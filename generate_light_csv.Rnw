source("./scripts/libraries.R", chdir=TRUE)

args = commandArgs(trailingOnly=TRUE)
benchmark_name = args[1]
folder_out = file.path(getwd(),args[2],"results")
filename = args[3]

writeLines(paste("[INFO] Generate the csv for",benchmark_name,"located at",filename,". Generate the csv at",folder_out))

folder_out <- "/home/sopi/Documents/Side_projects/behaviour-analysis/results/07-06-22_16-08-09/results"
benchmark_name <- "BlogRailsRoutesTwoRoutesTwoRequests"
filename <- "./results/07-06-22_16-08-09/BlogRailsRoutesTwoRoutesTwoRequests_Jun07-2022_20:50:52/parsed_BlogRailsRoutesTwoRoutesTwoRequests.mylog"
data <- load_data_file(filename)
data <- clean_data_file(data, FALSE) # remove any invalid data (extra logging info ignored by parsing)

############################################## MAIN TABLES ############################################## 
receivers_overview <- add_number_receivers(data, c(Call.Site, "Benchmark")) 

# These 3 tables should be feed as input to build table one and table two
before_all_optim <- receivers_overview %>% select(-Num.Receiver.Observed) %>% rename(Num.Receivers = Num.Receiver.Original) #focus on Num.Receiver.Original
after_tp <- receivers_overview %>% select(-Num.Receiver.Original) %>% rename(Num.Receivers = Num.Receiver.Observed) #focus on Num.Receiver.Observed
after_splitting <- add_number_receivers(data, c(Call.Site.Target, "Benchmark")) %>% select(-Num.Receiver.Original) %>% rename(Num.Receivers = Num.Receiver.Observed) #after tp has been addressed

mutate_per_state <- function(df, type_of_receiver) {
  result <- df %>%
    group_by_at(type_of_receiver) %>%
    dplyr::summarise(Num.Calls = n_distinct(Call.ID), Num.Call.Sites = n_distinct(Source.Section, Symbol))
  return (result)
}

generate_table_one <- function(df, benchmark_name) {
  table_one <- mutate_per_state(df, "Num.Receivers") 
  table_one <- tidyr::pivot_wider(table_one, 
                                  names_glue = "{Num.Receivers}_{.value}",
                                  names_from = Num.Receivers, 
                                  values_from = c(Num.Calls, Num.Call.Sites)
  ) 
  table_one$Benchmark = benchmark_name
  return(table_one)
}

###### SUMMARY TABLE ONE
# Build a summary table, structure as follows:
# vvvvvvvvvvvvvvvvvvvvvvvvvvvv     MONOMOPRHIC                POLYMOPRHIC                 MEGAMOPRHIC
# vvvvvvvvvvvvvvvvvvvvvvvvvvvv #Calls #Call.Sites       #Calls       #Call.Sites       #Calls       #Call.Sites
# Benchmark #Calls #Call.Sites   1        1         2 3 4 5 6 7 8   2 3 4 5 6 7 8      9 10 ...     9 10 ...
# This table should be generated 2 times: 1 before applying any optimisations, 1 after TP, and one after splitting, which means ...
# it should be applied on 3 different tables
# We should ouput a csv containing this table, that will later be read and aggregated with other benchmarks
# The merging should auto fill missing columns with 0s (not NAs)

table_one_before <- generate_table_one(before_all_optim, benchmark_name)
table_one_tp <- generate_table_one(after_tp, benchmark_name)
table_one_splitting <- generate_table_one(after_splitting, benchmark_name)
#table_one <- table_one %>% select(order(colnames(table_one)))


# In addition to this table, it would be nice to have a table listing the different call-sites of a benchmark, as well as their different receivers throughout runtime?
# Again, 3 different tables
# In essence:
# Benchmark Lexical.Location Symbol Cache.State Receivers 



gc()
###### SUMMARY TABLE TWO
# Table summarizing the amount of call sites being mono, poly, mega
total_w_splitting <- add_number_receivers(data, c(Call.Site.Target, "Benchmark"))
total_wo_splitting <- add_number_receivers(data, c(Call.Site, "Benchmark"))

gc()

num_target_observed_wo_splitting_tp <- compute_num_target_details(total_wo_splitting, Call.Site,  "Observed.Receiver")
num_target_original_wo_splitting <- compute_num_target_details(total_wo_splitting, Call.Site,  "Original.Receiver")
num_target_observed_w_splitting_tp <- compute_num_target_details(total_w_splitting, Call.Site.Target,  "Observed.Receiver")

total_w_splitting <- add_lookup_status_per_call(total_w_splitting)

gc()

# Required for splitting
transition_data <- analyse_splitting_transitions(total_w_splitting, benchmark_name, Call.Site, Call.Site.Target)
splitting_transition_summary_sites <- summarise_transition_sites(transition_data)
splitting_transition_summary_sites <- as.data.frame(t(splitting_transition_summary_sites))

gc()
############################################## AGGREGATED STATISTICS ###############################################   
compute_cache_status <- function(df, num_entries) {
  return (which(rownames(df) == num_entries))
}

compute_amount_calls_sites <- function(df, call_or_site) {
  return (which(colnames(df) == call_or_site))
}

compute_before_after <- function(df, cache_status_int, call_or_site) {
  if (cache_status_int == 2) {
    d <- df %>%
      filter(Num.Receiver >= 2 & Num.Receiver <= 8) %>%
      dplyr::summarise(Sum=sum(!! sym(call_or_site)))
      result <- d$Sum
      if (is.empty(result)) {
        return(0)
    }
    return (result)
  }
  else if (cache_status_int == 9) {
    d <- df %>%
      filter(Num.Receiver >= 9) %>%
      dplyr::summarise(Sum=sum(!! sym(call_or_site)))
    result <- d$Sum
    if (is.empty(result)) {
      return(0)
    }
    return (result)
  }
  cache_status <- compute_cache_status(df, cache_status_int)
  row_call_site <- compute_amount_calls_sites(df, call_or_site)
  result <- df[cache_status,row_call_site][[call_or_site]]
  if (is.empty(result)) {
    return(0)
    }
  return (result)
}

compute_evolution <- function(before, after) {
  if (before == 0) {return(0)}
  return (round(((after - before) / before) * 100,  digits = 1))
}

write_on_disk <- function(df, name, path = "") {
 write.table(df,paste(path,paste(benchmark_name, name,".csv",sep="-"), sep="/"), col.names = FALSE, row.names = FALSE) 
}

write_on_disk_split <- function(df, name, path = "") {
 write.table(df,paste(path,paste(benchmark_name, name,".csv",sep="-"), sep="/"), col.names = FALSE, row.names = TRUE, sep=";") 
}

# Target polymorphism - calls
before <- compute_before_after(num_target_original_wo_splitting, 1, "Num.Calls")
after <- compute_before_after(num_target_observed_wo_splitting_tp, 1, "Num.Calls")
tp_calls_mono <- c(benchmark_name, before, after, compute_evolution(before, after), "MONO")

before <- compute_before_after(num_target_original_wo_splitting, 2, "Num.Calls")
after <- compute_before_after(num_target_observed_wo_splitting_tp, 2, "Num.Calls")
tp_calls_poly <- c(benchmark_name, before, after, compute_evolution(before, after), "POLY")

before <- compute_before_after(num_target_original_wo_splitting, 9, "Cumulative.Calls")
after <- compute_before_after(num_target_observed_wo_splitting_tp, 9, "Cumulative.Calls")
tp_calls_mega <- c(benchmark_name, before, after, compute_evolution(before, after), "MEGA")

# Target polymoprhism - call sites
before <- compute_before_after(num_target_original_wo_splitting, 1, "Num.Call.Sites")
after <- compute_before_after(num_target_observed_wo_splitting_tp, 1, "Num.Call.Sites")
tp_call_sites_mono <- c(benchmark_name, before, after, compute_evolution(before, after), "MONO")

before <- compute_before_after(num_target_original_wo_splitting, 2, "Num.Call.Sites")
after <- compute_before_after(num_target_observed_wo_splitting_tp, 2, "Num.Call.Sites")
tp_call_sites_poly <- c(benchmark_name, before, after, compute_evolution(before, after), "POLY")

before <- compute_before_after(num_target_original_wo_splitting, 9, "Cumulative.Call.Sites")
after <- compute_before_after(num_target_observed_wo_splitting_tp, 9, "Cumulative.Call.Sites")
tp_call_sites_mega <- c(benchmark_name, before, after, compute_evolution(before, after), "MEGA")

# Splitting - calls
before <- compute_before_after(num_target_observed_wo_splitting_tp, 1, "Num.Calls")
after <- compute_before_after(num_target_observed_w_splitting_tp, 1, "Num.Calls")
split_calls_mono <- c(benchmark_name, before, after, compute_evolution(before, after), "MONO")

before <- compute_before_after(num_target_observed_wo_splitting_tp, 2, "Num.Calls")
after <- compute_before_after(num_target_observed_w_splitting_tp, 2, "Num.Calls")
split_calls_poly <- c(benchmark_name, before, after, compute_evolution(before, after), "POLY")

before <- compute_before_after(num_target_observed_wo_splitting_tp, 9, "Cumulative.Calls")
after <- compute_before_after(num_target_observed_w_splitting_tp, 9, "Cumulative.Calls")
split_calls_mega <- c(benchmark_name, before, after, compute_evolution(before, after), "MEGA")

# Splitting - call-sites
before <- compute_before_after(num_target_observed_wo_splitting_tp, 1, "Num.Call.Sites")
after <- compute_before_after(num_target_observed_w_splitting_tp, 1, "Num.Call.Sites")
split_call_sites_mono <- c(benchmark_name, before, after, compute_evolution(before, after), "MONO")

before <- compute_before_after(num_target_observed_wo_splitting_tp, 2, "Num.Call.Sites")
after <- compute_before_after(num_target_observed_w_splitting_tp, 2, "Num.Call.Sites")
split_call_sites_poly <- c(benchmark_name, before, after, compute_evolution(before, after), "POLY")

before <- compute_before_after(num_target_observed_wo_splitting_tp, 9, "Cumulative.Call.Sites")
after <- compute_before_after(num_target_observed_w_splitting_tp, 9, "Cumulative.Call.Sites")
# it augmented by x%
split_call_sites_mega <- c(benchmark_name, before, after, compute_evolution(before, after), "MEGA")

############################################## SAVE AS CSV ###############################################

if (!dir.exists(file.path(folder_out,"TP")) & !dir.exists(file.path(folder_out,"Split"))) {
  dir.create(file.path(folder_out,"TP","Calls"), recursive = TRUE)
  dir.create(file.path(folder_out,"TP","Call-Sites"), recursive = TRUE)
  dir.create(file.path(folder_out,"Split","Calls"), recursive = TRUE)
  dir.create(file.path(folder_out,"Split","Call-Sites"), recursive = TRUE)
  dir.create(file.path(folder_out,"Split","Transitions"), recursive = TRUE)
}

write_on_disk(tp_calls_mono, "tp_calls_mono", file.path(folder_out,"TP","Calls"))
write_on_disk(tp_calls_poly, "tp_calls_poly", file.path(folder_out,"TP","Calls"))
write_on_disk(tp_calls_mega, "tp_calls_mega", file.path(folder_out,"TP","Calls"))

write_on_disk(tp_call_sites_mono, "tp_call_sites_mono", file.path(folder_out,"TP","Call-Sites"))
write_on_disk(tp_call_sites_poly, "tp_call_sites_poly", file.path(folder_out,"TP","Call-Sites"))
write_on_disk(tp_call_sites_mega, "tp_call_sites_mega", file.path(folder_out,"TP","Call-Sites"))

write_on_disk(split_calls_mono, "split_calls_mono", file.path(folder_out,"Split","Calls"))
write_on_disk(split_calls_poly, "split_calls_poly", file.path(folder_out,"Split","Calls"))
write_on_disk(split_calls_mega, "split_calls_mega", file.path(folder_out,"Split","Calls"))

write_on_disk(split_call_sites_mono, "split_call_site_mono", file.path(folder_out,"Split","Call-Sites"))
write_on_disk(split_call_sites_poly, "split_call_site_poly", file.path(folder_out,"Split","Call-Sites"))
write_on_disk(split_call_sites_mega, "split_call_site_mega", file.path(folder_out,"Split","Call-Sites"))

write_on_disk_split(splitting_transition_summary_sites, "splitting_transition_summary_sites", file.path(folder_out,"Split","Transitions"))