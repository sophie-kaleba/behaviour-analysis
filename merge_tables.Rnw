%!TEX root = paper.tex
<<knitr-load, echo=FALSE, include=FALSE>>=
if (Sys.getenv("RSTUDIO") == "1") {
    setwd("/home/sopi/Documents/Side_projects/behaviour-analysis/")
} else {
   opts_chunk$set(
    fig.path="./figure/",
    fig.keep='all',
    dev=c('tikz'), #dev='pdf',c('tikz', 'svg'),
    dev.args=list(pointsize=8, timestamp = FALSE),
    echo=FALSE,
    external=FALSE,
    tidy=FALSE)

  ## Make sure that TikZDevice is used for measuring size of latex labels
  options(device = function(...) tikzDevice::tikz(tempfile(), ...))
}

source("./scripts/libraries.R", chdir=TRUE)


folder_out <- file.path(getwd(),"results", "experiment")

############################################## UTILS ###############################################  

load_data_file <- function(filename) {
  row_names <- c("Benchmark", "Before", "After", "Variation", "Type")
  as.data.frame(t(read.csv(filename, sep="\n", strip.white = TRUE, header=FALSE, row.names = row_names)))
}

load_all_tables <- function (folder, type, call_or_site) { 
  result <- NULL
  folder <- file.path(folder_out, type, call_or_site)
  files <- sort(list.files(folder))
  
  for (f in files) {
    data <- load_data_file(file.path(folder, f))
    result <- rbind(result, data)
  }
  return(result)
}

rearrange_table <- function(df) {
 spec <- tidyr::build_wider_spec(
  df, 
  names_from = Type, 
  values_from = c(Before, After, Variation), 
  names_glue = "{Type}_{.value}")
  
  spec <- spec %>% 
    arrange(factor(.name, levels = c("MONO_Before", "MONO_After", "MONO_Variation", "POLY_Before", "POLY_After", "POLY_Variation", "MEGA_Before", "MEGA_After", "MEGA_Variation") ))
  
  return(tidyr::pivot_wider_spec(df, spec))
}

build_nice_latex_table <- function(df) {
# trash the data BUT looks exactly how it should for the paper
# see https://stackoverflow.com/questions/13984470/possible-to-create-latex-multicolumns-in-xtable/28420723#28420723
names(df)[2] = names(df)[5] = names(df)[8] = "Before"
names(df)[3] = names(df)[6] = names(df)[9] = "After"
names(df)[4] = names(df)[7] = names(df)[10] = "Variation"
beauty <- kableExtra::kable(df, booktabs = TRUE) %>%
  kableExtra::add_header_above(c("", "MONO"=3, "POLY"=3, "MEGA"=3)) %>%
  kableExtra::kable_styling(latex_options = "hold_position")
return(beauty)
}

############################################## MERGED TABLES ############################################### 

data_tp_calls <- load_all_tables(folder_out, "TP", "Calls")
data_tp_call_sites <- load_all_tables(folder_out, "TP", "Call-Sites")

data_split_calls <- load_all_tables(folder_out, "Split", "Calls")
data_split_call_sites <- load_all_tables(folder_out, "TP", "Call-Sites")

# and rearranged
table_data_tp_calls <- rearrange_table(data_tp_calls)
table_data_tp_call_sites <- rearrange_table(data_tp_call_sites)

table_data_split_calls <- rearrange_table(data_split_calls)
table_data_split_call_sites <- rearrange_table(data_split_call_sites)

# and all latexed
latex_tp_calls <- build_nice_latex_table(table_data_tp_calls)
latex_tp_call_sites <- build_nice_latex_table(table_data_tp_call_sites)

latex_split_calls <- build_nice_latex_table(table_data_split_calls)
latex_split_call_sites <- build_nice_latex_table(table_data_split_call_sites)

############################################## LATEX COMMAND GENERATION ##############################################

@
\def\SplitCallSites{%
<<SplitCallSites, echo=FALSE, results='asis'>>=
print(latex_split_call_sites)
  @
  }%
  
\def\SplitCalls{%
<<SplitCalls, echo=FALSE, results='asis'>>=
print(latex_split_calls)
  @
  }%

\def\TPCallSites{%
<<TPCallSites, echo=FALSE, results='asis'>>=
print(latex_tp_call_sites)
  @
  }%
  
\def\TPCalls{%
<<TPCalls, echo=FALSE, results='asis'>>=
print(latex_tp_calls)
  @
  }%