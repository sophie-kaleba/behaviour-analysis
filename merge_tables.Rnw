%!TEX root = paper.tex
<<knitr-load, echo=FALSE, include=FALSE>>=
  if (Sys.getenv("RSTUDIO") == "1") {
    setwd("/home/sopi/Documents/Side_projects/ruby-cs-analyser/behaviour-analysis/")
  } else {
    opts_chunk$set(
      fig.path="./figure/",
      fig.keep='all',
      dev=c('tikz'), #dev='pdf',c('tikz', 'svg'),
      dev.args=list(pointsize=8, timestamp = FALSE),
      echo=FALSE,
      external=FALSE,
      tidy=FALSE)
    
    ## Make sure that TikZDevice is used for measuring size of latex labels
    options(device = function(...) tikzDevice::tikz(tempfile(), ...))
  }

source("./scripts/libraries.R", chdir=TRUE)
source("./scripts/merge.R", chdir=TRUE)

# Coverage data
coverage_data <- load_all_tables(folder_status, FALSE, folder_pattern="Coverage", patt="global") 
colnames(coverage_data) <- c("Benchmark", "Stmt.Cov", "Num.Stmt", "Fn.Cov", "Num.Fn")

coverage_data <- rename_benchs(coverage_data, benchs_small_names) %>%
  dplyr::mutate(Freq.Statement.Covered = round((Stmt.Cov / Num.Stmt)*100, 1), Num.Fn.Covered = round((Fn.Cov / Num.Fn)*100, 1))

all_stmt <- sum(coverage_data$Num.Stmt)
stmt_cov <- sum(coverage_data$Stmt.Cov)
freq_cov <- round((stmt_cov / all_stmt)*100,0)
all_fn <- sum(coverage_data$Num.Fn)
fn_cov <- sum(coverage_data$Fn.Cov)
freq_fn_cov <- round((fn_cov / all_fn)*100,0)

coverage_data <- coverage_data %>%
  select(-Stmt.Cov, -Fn.Cov) %>%
  dplyr::rename("Stmt.Cov" = "Freq.Statement.Covered" , "Fn.Cov" = "Num.Fn.Covered") %>%
  select(Benchmark, Num.Stmt, Stmt.Cov, Num.Fn, Fn.Cov)

# Behaviour data - General
data <- load_all_tables(folder_status, folder_pattern = file.path(folder_path,"General"), patt="one") %>% replace(is.na(.), 0)
data <- join(coverage_data, data) %>% select(c("Benchmark", "Times.Splitted"), everything())
names(data) <- sub('(\\D+)(\\d+$)', '\\2_\\1', names(data))

# Behaviour data - Distribution
table_distrib <- load_all_tables(folder_status, folder_pattern = file.path(folder_path,"Distribution"), patt="distribution") %>% replace(is.na(.), 0)

# Behaviour data - Caller polymorphism
table_caller_polymorphism <- load_all_tables(folder_status, folder_pattern = file.path(folder_path,"General"), patt="polymorphism") %>% replace(is.na(.), 0)
table_caller_polymorphism <- table_caller_polymorphism[ , gtools::mixedsort(names(table_caller_polymorphism))] %>% select(c("Benchmark", "Total.Num.Methods", everything()))

# Behaviour data - Splitting transitions
table_split_transitions <- load_all_tables(folder_status, folder_pattern = file.path(folder_path,"General") , patt="split")

op <- sum(table_split_transitions$`MONO->MONO (=)`)
tot <- sum(table_split_transitions$Times.Splitted)
respl <- round((op/tot) * 100, 1)

table_split_transitions <- table_split_transitions %>%
  dplyr::mutate(`MONO->MONO (!=)` = compute_weight(`MONO->MONO (!=)`, Times.Splitted),
                `MONO->MONO (=)` = compute_weight(`MONO->MONO (=)`, Times.Splitted)) %>%
  select("Benchmark","Times.Splitted", "MONO->MONO (!=)", "MONO->MONO (=)" )

############################################################################################# 
## Processing of the behaviour data to distinguish between the different call-site optimisations

before <- data %>%
  select(1:6, contains("Before"))
names(before) <- sub('(\\d+)_([a-zA-Z]+).(\\D+)_', '\\1_\\3', names(before))
before <- before[ , gtools::mixedsort(names(before))] %>% select(c("Benchmark", "Num.Stmt", "Stmt.Cov", "Num.Fn", "Fn.Cov", "Times.Splitted"), everything())
before <- sum_poly(before)  

#write.csv(before %>% select(Benchmark, Total.Calls), "simple_data.csv", sep=" ")

tp <- data %>%
  select(1:6, contains("TP"))
names(tp) <- sub('(\\d+)_([a-zA-Z]+).(\\D+)_', '\\1_\\3', names(tp))
tp <- tp[ , gtools::mixedsort(names(tp))] %>% select(c("Benchmark", "Num.Stmt", "Stmt.Cov", "Num.Fn", "Fn.Cov", "Times.Splitted"), everything())
tp <- sum_poly(tp)  

splitting <- data %>%
  select(1:6, contains("Split"))
names(splitting) <- sub('(\\d+)_([a-zA-Z]+).(\\D+)_', '\\1_\\3', names(splitting))
splitting <- splitting[ , gtools::mixedsort(names(splitting))] %>% select(c("Benchmark", "Num.Stmt", "Stmt.Cov", "Num.Fn", "Fn.Cov", "Times.Splitted"), everything())
splitting <- sum_poly(splitting) 

############################################################################################# 
## Build the summary tables
# Build the general metrics table
table_one <- before %>% 
  cluster_benchmarks() %>%
  select(Benchmark, Num.Stmt, Stmt.Cov, Num.Fn, Fn.Cov, Max.Target, Mono.Call.Sites, Mono.Calls, Poly.Call.Sites, Poly.Calls, Mega.Call.Sites, Mega.Calls, Total.Calls, Freq.Poly.Calls, Total.Call.Sites, Freq.Poly.Call.Sites, Cluster.Type)

# This is required so that the group of benchmark stays the same across all tables
benchmark_types <- table_one %>%
  select(Benchmark, Cluster.Type)

table_before_aux <- build_summary_tables(before, benchmark_types)
table_tp_aux <- build_summary_tables(tp, benchmark_types, "TP_")
table_split_aux <- build_summary_tables(splitting, benchmark_types, "SPLIT_")

# from this table, we can extract Table2, for both calls and call-sites
table_two_aftertp <- table_before_aux %>%
  merge(table_tp_aux) %>%
  #  filter(Poly.Call.Sites > 0) %>% don't summarize just yet, summarize when generating the latex table
  mutate(Change.Mono.Sites = round((100 * (TP_Mono.Call.Sites - `Mono.Call.Sites`)/`Mono.Call.Sites`), 1), 
         Change.Mono.Calls = round((100 * (TP_Mono.Calls - `Mono.Calls`)/`Mono.Calls`),1),
         Change.Poly.Sites = round((100 * (TP_Poly.Call.Sites - Poly.Call.Sites)/Poly.Call.Sites), 1), 
         Change.Poly.Calls = round((100 * (TP_Poly.Calls - Poly.Calls)/Poly.Calls), 1),
         Change.Mega.Sites = round((100 * (TP_Mega.Call.Sites - Mega.Call.Sites)/Mega.Call.Sites), 1), 
         Change.Mega.Calls = round((100 * (TP_Mega.Calls - Mega.Calls)/Mega.Calls), 1))  %>%
  mutate_all(~replace(., is.nan(.), 0)) %>%
  dplyr::arrange(Cluster.Type, Benchmark)

# from this table, we can extract Table3, for both calls and call-sites. Beware, we still need the number of times they have been split
table_three_aftersplit <- table_tp_aux %>%
  merge(table_split_aux) %>%
  #  filter(TP_Poly.Call.Sites > 0) %>% don't summarize just yet, summarize when generating the latex table
  mutate(Change.Mono.Sites = round((100 * (SPLIT_Mono.Call.Sites - `TP_Mono.Call.Sites`)/`TP_Mono.Call.Sites`), 1), 
         Change.Mono.Calls = round((100 * (SPLIT_Mono.Calls - `TP_Mono.Calls`)/`TP_Mono.Calls`),1),
         Change.Poly.Sites = round((100 * (SPLIT_Poly.Call.Sites - TP_Poly.Call.Sites)/TP_Poly.Call.Sites), 1), 
         Change.Poly.Calls = round((100 * (SPLIT_Poly.Calls - TP_Poly.Calls)/TP_Poly.Calls), 1),
         Change.Mega.Sites = round((100 * (SPLIT_Mega.Call.Sites - TP_Mega.Call.Sites)/TP_Mega.Call.Sites), 1), 
         Change.Mega.Calls = round((100 * (SPLIT_Mega.Calls - TP_Mega.Calls)/TP_Mega.Calls), 1)) %>%
  mutate_all(~replace(., is.nan(.), 0)) %>%
  dplyr::arrange(Cluster.Type, Benchmark)

mini_table <- table_one %>%
  merge(table_tp_aux) %>%
  merge(table_split_aux) %>%
  combine_similar_benchmarks(c("PsdUtil","PsdCompose","PsdImage","ChunkyCanvas","ChunkyColor"), FALSE) %>% 
  mutate(Change.Poly.Sites = round((100 * (SPLIT_Poly.Call.Sites - Poly.Call.Sites)/Poly.Call.Sites), 1), 
       Change.Poly.Calls = round((100 * (SPLIT_Poly.Calls - Poly.Calls)/Poly.Calls), 1),
       Change.Mega.Sites = round((100 * (SPLIT_Mega.Call.Sites - Mega.Call.Sites)/Mega.Call.Sites), 1), 
       Change.Mega.Calls = round((100 * (SPLIT_Mega.Calls - Mega.Calls)/Mega.Calls), 1)) %>%
  mutate_all(~replace(., is.nan(.), 0)) %>%
  add_percent(c("Change.Poly.Sites", "Change.Mega.Sites", "Change.Poly.Calls", "Change.Mega.Calls")) 

# This table displays to which extent the optimizations impacted polymorphism, this is new from the article
table_four_max <- table_before_aux %>%
  merge(table_tp_aux) %>%
  merge(table_split_aux) %>%
  select(Benchmark, Max.Target, TP_Max.Target, SPLIT_Max.Target) %>%
  merge(benchmark_types, by="Benchmark") 
#  filter(Max.Target > 1) don't summarize just yet, summarize when generating the latex table

quantile(table_four_max$Max.Target)
quantile(table_four_max$TP_Max.Target)
quantile(table_four_max$SPLIT_Max.Target)

############################################## MACROS ###############################################
num_benchmarks <- nrow(coverage_data)
if (num_benchmarks != nrow(data)) {
  exit("Both coverage and behaviour tables should have the same number of rows (1 row = 1 benchmark")
}
num_methods <- sum(table_one$Total.Calls)
mega_benchs <- nrow(table_one %>% filter(Cluster.Type == "Megamorphic"))
med_poly_benchs <- nrow(table_one %>% filter(Cluster.Type == "Polymorphic.Medium"))
small_poly_benchs <- nrow(table_one %>% filter(Cluster.Type == "Polymorphic.Small"))

num_mono_sites <- sum(table_one$Mono.Call.Sites)
num_poly_sites <- sum(table_one$Poly.Call.Sites)
num_mega_sites <- sum(table_one$Mega.Call.Sites)
num_sites <- sum(table_one$Total.Call.Sites)

freq_mono_total <- round((num_mono_sites/num_sites)*100, 1)
highest_poly_freq <- before %>% select(Freq.Poly.Call.Sites) %>% arrange(Freq.Poly.Call.Sites) %>% tail(1)

# fn coverage-related bits
lowest_fn_cov <- table_one %>% arrange(Fn.Cov) %>% head(1)
lowest_fn_cov <- lowest_fn_cov$Fn.Cov

highest_fn_cov <- table_one %>% arrange(desc(Fn.Cov)) %>% head(1)
highest_fn_cov <- highest_fn_cov$Fn.Cov

# loc coverage-related bits
lowest_loc_cov <- table_one %>% arrange(Stmt.Cov) %>% head(1)
lowest_loc_cov <- lowest_loc_cov$Stmt.Cov

highest_loc_cov <- table_one %>% arrange(desc(Stmt.Cov)) %>% head(1)
highest_loc_cov <- highest_loc_cov$Stmt.Cov

lowest_tp_poly <- table_two_aftertp %>% select(Change.Poly.Calls) %>% arrange(desc(Change.Poly.Calls)) %>% head(2)
lowest_tp_poly_outlier <- lowest_tp_poly$Change.Poly.Calls[[1]]
if (length(lowest_tp_poly) > 1) {
  lowest_tp_poly_second <- lowest_tp_poly$Change.Poly.Calls[[2]]
} else {
  lowest_tp_poly_second <- lowest_tp_poly$Change.Poly.Calls[[1]]
}

highest_tp_poly <- table_two_aftertp %>% select(Change.Poly.Calls) %>% arrange(Change.Poly.Calls) %>% head(1)
highest_tp_poly <- highest_tp_poly$Change.Poly.Calls

lowest_tp_mega <- table_two_aftertp %>% filter(Cluster.Type == "Megamorphic") %>% select(Change.Mega.Calls) %>% arrange(desc(Change.Mega.Calls)) %>% head(1)
lowest_tp_mega <- lowest_tp_mega$Change.Mega.Calls

highest_tp_mega <- table_two_aftertp %>% filter(Cluster.Type == "Megamorphic") %>% select(Change.Mega.Calls) %>% arrange(Change.Mega.Calls) %>% head(1)
highest_tp_mega <- highest_tp_mega$Change.Mega.Calls

num_mono_wout_outlier <- table_one %>% select(Benchmark, Total.Call.Sites,  Mono.Call.Sites) %>% filter(Benchmark != "Sinatra" & Benchmark != "BlogRails" & Benchmark != "ERubiRails" & Benchmark != "HexaPdfSmall") %>% summarise(Total = sum(Total.Call.Sites), Mono = sum(Mono.Call.Sites)) %>% mutate(Result = (Mono / Total) * 100)
num_mono_wout_outlier <- round(num_mono_wout_outlier$Result, 1)

min_div <- table_four_max %>% mutate(result = Max.Target / SPLIT_Max.Target) %>% arrange(result) %>% select(result) %>% head(1)
max_div <- table_four_max %>% mutate(result = Max.Target / SPLIT_Max.Target) %>% arrange(result) %>% select(result) %>% tail(3) %>% head(1)

befo <- table_two_aftertp %>% select(TP_Poly.Calls, Poly.Calls, Benchmark) %>% filter(Benchmark != "RedBlack") %>% summarise(tp = sum(TP_Poly.Calls), b = sum(Poly.Calls)) %>%
  mutate(res = round((100 * (tp - b)/b), 1))


############################################## LATEX FORMATTING ###############################################
# Format the tables so they can be added in a tex file

table_one <- table_one %>% 
  combine_similar_benchmarks(c("PsdUtil","PsdCompose","PsdImage","ChunkyCanvas","ChunkyColor")) %>%
  apply_k_columns(c("Total.Calls")) %>%
  apply_big_numbers(c("Num.Stmt", "Num.Fn", "Total.Calls", "Total.Call.Sites")) %>% 
  add_percent(c("Freq.Poly.Calls", "Freq.Poly.Call.Sites", "Stmt.Cov", "Fn.Cov")) %>% 
  dplyr::arrange(Cluster.Type, Benchmark)
table_one_copy <- copy(table_one)

table_two_aftertp <- table_two_aftertp %>% 
  combine_similar_benchmarks(c("PsdUtil","PsdCompose","PsdImage","ChunkyCanvas","ChunkyColor")) %>% 
  apply_big_numbers(c("Mono.Calls", "Mono.Call.Sites", "Poly.Calls", "Poly.Call.Sites", "Mega.Calls", "Mega.Call.Sites")) %>%
  apply_big_numbers(c("TP_Mono.Calls", "TP_Mono.Call.Sites", "TP_Poly.Calls", "TP_Poly.Call.Sites", "TP_Mega.Calls", "TP_Mega.Call.Sites")) %>%
  add_percent(c("Change.Poly.Sites", "Change.Mega.Sites", "Change.Poly.Calls", "Change.Mega.Calls")) %>% 
  dplyr::arrange(Cluster.Type, Benchmark)
table_two_aftertp_copy <- copy(table_two_aftertp)

table_three_aftersplit <- table_three_aftersplit %>%
  merge(table_split_transitions %>% select(Benchmark, Times.Splitted), by="Benchmark") %>%
  combine_similar_benchmarks(c("PsdUtil","PsdCompose","PsdImage","ChunkyCanvas","ChunkyColor")) %>% 
  apply_big_numbers(c("TP_Mono.Calls", "TP_Mono.Call.Sites", "TP_Poly.Calls", "TP_Poly.Call.Sites", "TP_Mega.Calls", "TP_Mega.Call.Sites")) %>%
  apply_big_numbers(c("SPLIT_Mono.Calls", "SPLIT_Mono.Call.Sites", "SPLIT_Poly.Calls", "SPLIT_Poly.Call.Sites", "SPLIT_Mega.Calls", "SPLIT_Mega.Call.Sites")) %>% 
  add_percent(c("Change.Poly.Sites", "Change.Mega.Sites", "Change.Poly.Calls", "Change.Mega.Calls")) %>%
  dplyr::arrange(Cluster.Type, Benchmark)
table_three_aftersplit_copy <- copy(table_three_aftersplit)

table_four_max <- table_four_max %>%
  combine_similar_benchmarks(c("PsdUtil","PsdCompose","PsdImage","ChunkyCanvas","ChunkyColor")) %>% 
  dplyr::arrange(Cluster.Type, Benchmark)
table_four_max_copy <- copy(table_four_max)

table_split_transitions <- table_split_transitions %>%
  merge(benchmark_types, by="Benchmark") %>%
  combine_similar_benchmarks(c("PsdUtil","PsdCompose","PsdImage","ChunkyCanvas","ChunkyColor")) %>%
  dplyr::arrange(Cluster.Type, Benchmark) %>% 
  add_percent(c("MONO->MONO (!=)", "MONO->MONO (=)"))
table_split_transitions_copy <- copy(table_split_transitions)

table_one_latex <- kableExtra::kable(table_one %>% select(-Max.Target, -Mono.Call.Sites, -Mono.Calls, -Poly.Call.Sites, -Poly.Calls, -Mega.Call.Sites, -Mega.Calls, -Cluster.Type), booktabs = TRUE, align = "r", escape = TRUE, linesep=c("")) %>%
  cluster_styling(table_one_copy)

table_two_sites_latex <- kableExtra::kable(table_two_aftertp %>% select(-Max.Target, -TP_Max.Target, -contains("Mono"), -contains("Calls"), -contains("TP"), -Cluster.Type), booktabs = TRUE, align = "r", linesep=c(""))  %>%
  cluster_styling(table_two_aftertp_copy)

table_two_calls_latex <- kableExtra::kable(table_two_aftertp %>% select(-Max.Target, -TP_Max.Target, -contains("Mono"), -contains("Sites"), -contains("TP"), -Cluster.Type), booktabs = TRUE, align = "r", linesep=c("")) %>% 
  cluster_styling(table_two_aftertp_copy)

table_three_sites_latex <- kableExtra::kable(table_three_aftersplit %>% select(-SPLIT_Max.Target, -TP_Max.Target, -contains("Mono"), -contains("Calls"), -contains("SPLIT"), -Cluster.Type, Times.Splitted), booktabs = TRUE, align = "r", linesep=c("")) %>% 
  cluster_styling(table_three_aftersplit_copy)

table_three_calls_latex <- kableExtra::kable(table_three_aftersplit %>% select(-SPLIT_Max.Target, -TP_Max.Target, -contains("Mono"), -contains("Sites"), -contains("SPLIT"), -Cluster.Type, Times.Splitted), booktabs = TRUE, align = "r", linesep=c("")) %>% 
  cluster_styling(table_three_aftersplit_copy)

table_four_latex <- kableExtra::kable(table_four_max %>% filter (Cluster.Type != "Polymorphic.Small") %>% select(-Cluster.Type), booktabs = TRUE, align = "r", linesep=c("")) %>% 
  cluster_styling(table_four_max_copy)

table_split_transitions_latex <- kableExtra::kable(table_split_transitions %>% select(-Cluster.Type), booktabs = TRUE, align = "r", linesep=c("")) %>% 
  cluster_styling(table_split_transitions_copy)

table_distrib_latex <- kableExtra::kable(table_distrib %>% dplyr::select(Benchmark, everything()), booktabs = TRUE, align = "r", linesep=c("")) %>% kableExtra::kable_styling(latex_table_env="tabularx")

table_caller_poly_latex <- kableExtra::kable(table_caller_polymorphism, booktabs = TRUE, align = "r", linesep=c("")) %>% kableExtra::kable_styling(latex_table_env="tabularx")

# Shortened versions for article
table_two_calls_latex_mini <- kableExtra::kable(table_two_aftertp %>% filter (Cluster.Type != "Polymorphic.Small") %>% select(-Max.Target, -TP_Max.Target, -contains("Mono"), -contains("Sites"), -contains("TP"), -Cluster.Type), booktabs = TRUE, align = "r", linesep=c("")) %>% 
  cluster_styling(table_two_aftertp_copy)

table_three_calls_latex_mini <- kableExtra::kable(table_three_aftersplit %>% filter (Cluster.Type != "Polymorphic.Small") %>% select(-SPLIT_Max.Target, -TP_Max.Target, -contains("Mono"), -contains("Sites"), -contains("SPLIT"), -Cluster.Type, Times.Splitted), booktabs = TRUE, align = "r", linesep=c("")) %>% 
  cluster_styling(table_three_aftersplit_copy)

############################################## BLOCKS - table 1 ###############################################

block_data <- load_all_tables(folder_status, folder_pattern = file.path(folder_blocks,"General"), patt="one") %>% 
  replace(is.na(.), 0)
block_data <- join(coverage_data, block_data) %>% select(c("Benchmark", "Times.Splitted"), everything())
names(block_data) <- sub('(\\D+)(\\d+$)', '\\2_\\1', names(block_data))

block_before <- block_data %>%
  select(1:6, contains("Before"))
names(block_before) <- sub('(\\d+)_([a-zA-Z]+).(\\D+)_', '\\1_\\3', names(block_before))
block_before <- block_before[ , gtools::mixedsort(names(block_before))] %>% select(c("Benchmark", "Num.Stmt", "Stmt.Cov", "Num.Fn", "Fn.Cov", "Times.Splitted"), everything())
block_before <- sum_poly(block_before) %>% filter(Benchmark != "RedBlack")

block_mono_sites <- sum(block_before$Mono.Call.Sites)
block_mono_total <- sum(block_before$Total.Call.Sites)
block_perc_mono <- round((block_mono_sites/block_mono_total) * 100, 1)

block_table_one <- block_before %>% 
  cluster_benchmarks() %>%
  select(Benchmark, Num.Stmt, Stmt.Cov, Num.Fn, Fn.Cov, Max.Target, Mono.Call.Sites, Mono.Calls, Poly.Call.Sites, Poly.Calls, Mega.Call.Sites, Mega.Calls, Total.Calls, Freq.Poly.Calls, Total.Call.Sites, Freq.Poly.Call.Sites, Cluster.Type)

sum_blocks <- sum(block_before$Total.Calls)

block_table_one <- block_table_one %>% 
  combine_similar_benchmarks(c("PsdUtil","PsdCompose","PsdImage","ChunkyCanvas","ChunkyColor")) %>%
  apply_k_columns(c("Total.Calls")) %>%
  apply_big_numbers(c("Num.Stmt", "Num.Fn", "Total.Calls", "Total.Call.Sites")) %>% 
  add_percent(c("Freq.Poly.Calls", "Freq.Poly.Call.Sites", "Stmt.Cov", "Fn.Cov")) %>% 
  rename_with( ~ paste0("BLOCK_", .x), .cols = -c("Benchmark")) %>%
  merge(table_one, by="Benchmark") %>%
  dplyr::arrange(Cluster.Type, Benchmark)
block_table_one_copy <- copy(block_table_one)

block_table_one_latex <- kableExtra::kable(block_table_one %>% select(Benchmark, Total.Calls, Freq.Poly.Calls, Total.Call.Sites, Freq.Poly.Call.Sites, BLOCK_Total.Calls, BLOCK_Freq.Poly.Calls, BLOCK_Total.Call.Sites, BLOCK_Freq.Poly.Call.Sites), booktabs = TRUE, align = "r", escape = TRUE, linesep=c("")) %>%
  cluster_styling(block_table_one_copy) %>% kableExtra::column_spec(6:9, color = "black", background = "lightgray")

block_lowest_poly_freq <- block_before %>% select(Freq.Poly.Call.Sites) %>% arrange(Freq.Poly.Call.Sites) %>% head(2)
block_highest_poly_freq <- block_before %>% select(Freq.Poly.Call.Sites) %>% arrange(Freq.Poly.Call.Sites) %>% tail(2) %>% head(1)

if (nrow(block_lowest_poly_freq) > 1) {
   block_lowest_poly_freq_second <- block_lowest_poly_freq$Freq.Poly.Call.Sites[[2]]
 } else {
   block_lowest_poly_freq_second <- block_lowest_poly_freq$Freq.Poly.Call.Sites[[1]]
 }

ratio_block_meth <- round(num_methods / sum_blocks,0)

block_table_distrib <- load_all_tables(folder_status, folder_pattern = file.path(folder_blocks,"Distribution") , patt="distribution")
block_table_distrib_latex <- kableExtra::kable(block_table_distrib %>% dplyr::select(Benchmark, everything()), booktabs = TRUE, align = "r", linesep=c("")) %>% kableExtra::kable_styling(latex_table_env="tabularx")
############################################## BLOCKS - table extent ###############################################

block_splitting <- block_data %>%
  select(1:6, contains("Split"))
names(block_splitting) <- sub('(\\d+)_([a-zA-Z]+).(\\D+)_', '\\1_\\3', names(block_splitting))
block_splitting <- block_splitting[ , gtools::mixedsort(names(block_splitting))] %>% select(c("Benchmark", "Num.Stmt", "Stmt.Cov", "Num.Fn", "Fn.Cov", "Times.Splitted"), everything())
block_splitting <- sum_poly(block_splitting) 

block_table_split_aux <- build_summary_tables(block_splitting, benchmark_types, "SPLIT_")

block_table_four_max <- block_before %>%
  merge(block_table_split_aux) %>%
  select(Benchmark, Max.Target, SPLIT_Max.Target) 

block_table_four_max <- block_table_four_max %>% 
  combine_similar_benchmarks(c("PsdUtil","PsdCompose","PsdImage","ChunkyCanvas","ChunkyColor"), FALSE) %>%
  rename_with( ~ paste0("BLOCK_", .x), .cols = -c("Benchmark")) %>%
  merge(table_four_max, by="Benchmark") %>%
  dplyr::arrange(Cluster.Type, Benchmark)
block_table_four_max_copy <- copy(block_table_four_max)

block_table_four_latex <- kableExtra::kable(block_table_four_max %>% select(Benchmark, Max.Target, TP_Max.Target, SPLIT_Max.Target, BLOCK_Max.Target, BLOCK_SPLIT_Max.Target), booktabs = TRUE, align = "r", escape = TRUE, linesep=c("")) %>%
  cluster_styling(block_table_four_max_copy) %>% kableExtra::column_spec(5:6, color = "black", background = "lightgray")

############################################## BLOCKS - table split ###############################################

block_table_before_aux <- build_summary_tables(block_before, benchmark_types)

block_table_three_aftersplit <- block_table_before_aux %>%
  merge(block_table_split_aux) %>%
  #  filter(TP_Poly.Call.Sites > 0) %>% don't summarize just yet, summarize when generating the latex table
  mutate(Change.Mono.Sites = round((100 * (SPLIT_Mono.Call.Sites - `Mono.Call.Sites`)/`Mono.Call.Sites`), 1), 
         Change.Mono.Calls = round((100 * (SPLIT_Mono.Calls - `Mono.Calls`)/`Mono.Calls`),1),
         Change.Poly.Sites = round((100 * (SPLIT_Poly.Call.Sites - Poly.Call.Sites)/Poly.Call.Sites), 1), 
         Change.Poly.Calls = round((100 * (SPLIT_Poly.Calls - Poly.Calls)/Poly.Calls), 1),
         Change.Mega.Sites = round((100 * (SPLIT_Mega.Call.Sites - Mega.Call.Sites)/Mega.Call.Sites), 1), 
         Change.Mega.Calls = round((100 * (SPLIT_Mega.Calls - Mega.Calls)/Mega.Calls), 1)) %>%
  mutate_all(~replace(., is.nan(.), 0)) %>%
  dplyr::arrange(Cluster.Type, Benchmark)

block_table_three_aftersplit <- block_table_three_aftersplit %>%
  combine_similar_benchmarks(c("PsdUtil","PsdCompose","PsdImage","ChunkyCanvas","ChunkyColor")) %>% 
  add_percent(c("Change.Poly.Sites", "Change.Mega.Sites", "Change.Poly.Calls", "Change.Mega.Calls")) %>%
  rename_with( ~ paste0("BLOCK_", .x), .cols = -c("Benchmark")) %>%
  merge(mini_table %>% select(Benchmark, Change.Poly.Sites, Change.Poly.Calls, Change.Mega.Sites, Change.Mega.Calls), by="Benchmark") %>%
  apply_big_numbers(c("BLOCK_Mono.Calls", "BLOCK_Mono.Call.Sites", "BLOCK_Poly.Calls", "BLOCK_Poly.Call.Sites", "BLOCK_Mega.Calls", "BLOCK_Mega.Call.Sites")) %>%
  apply_big_numbers(c("BLOCK_SPLIT_Mono.Calls", "BLOCK_SPLIT_Mono.Call.Sites", "BLOCK_SPLIT_Poly.Calls", "BLOCK_SPLIT_Poly.Call.Sites", "BLOCK_SPLIT_Mega.Calls", "BLOCK_SPLIT_Mega.Call.Sites")) %>%
  rename(Cluster.Type = BLOCK_Cluster.Type) %>%
  dplyr::arrange(Cluster.Type, Benchmark)
block_table_three_aftersplit_copy <- copy(block_table_three_aftersplit)

block_table_three_sites_latex <- kableExtra::kable(block_table_three_aftersplit %>% select(Benchmark, Change.Poly.Sites, Change.Mega.Sites, BLOCK_Poly.Call.Sites, BLOCK_Mega.Call.Sites, BLOCK_Change.Poly.Sites, BLOCK_Change.Mega.Sites), booktabs = TRUE, align = "r", linesep=c("")) %>% 
  cluster_styling(block_table_three_aftersplit_copy) %>% kableExtra::column_spec(4:7, color = "black", background = "lightgray")

block_table_three_sites_latex_mini <- kableExtra::kable(block_table_three_aftersplit %>% filter(Cluster.Type != "Polymorphic.Small") %>% select(Benchmark, Change.Poly.Sites, Change.Mega.Sites, BLOCK_Poly.Call.Sites, BLOCK_Mega.Call.Sites, BLOCK_Change.Poly.Sites, BLOCK_Change.Mega.Sites), booktabs = TRUE, align = "r", linesep=c("")) %>% 
  cluster_styling(block_table_three_aftersplit_copy) %>% kableExtra::column_spec(4:7, color = "black", background = "lightgray")

block_table_three_calls_latex <- kableExtra::kable(block_table_three_aftersplit %>% select(Benchmark, Change.Poly.Calls, Change.Mega.Calls, BLOCK_Poly.Calls, BLOCK_Mega.Calls, BLOCK_Change.Poly.Calls, BLOCK_Change.Mega.Calls), booktabs = TRUE, align = "r", linesep=c("")) %>% 
  cluster_styling(block_table_three_aftersplit_copy) %>% kableExtra::column_spec(4:7, color = "black", background = "lightgray")

block_table_three_calls_latex_mini <- kableExtra::kable(block_table_three_aftersplit %>% filter(Cluster.Type != "Polymorphic.Small") %>%  select(Benchmark, Change.Poly.Calls, Change.Mega.Calls, BLOCK_Poly.Calls, BLOCK_Mega.Calls, BLOCK_Change.Poly.Calls, BLOCK_Change.Mega.Calls), booktabs = TRUE, align = "r", linesep=c("")) %>% 
  cluster_styling(block_table_three_aftersplit_copy) %>% kableExtra::column_spec(4:7, color = "black", background = "lightgray")

############################################## BLOCKS - table split transitions ###############################################
block_table_split_transitions <- load_all_tables(folder_status, folder_pattern = file.path(folder_blocks,"General") , patt="split")

block_table_split_transitions <- block_table_split_transitions %>%
  dplyr::mutate(`MONO->MONO (!=)` = compute_weight(`MONO->MONO (!=)`, Times.Splitted),
                `MONO->MONO (=)` = compute_weight(`MONO->MONO (=)`, Times.Splitted)) %>%
  select("Benchmark","Times.Splitted", "MONO->MONO (!=)", "MONO->MONO (=)" )

block_table_split_transitions <- block_table_split_transitions %>%
  merge(benchmark_types, by="Benchmark") %>%
  combine_similar_benchmarks(c("PsdUtil","PsdCompose","PsdImage","ChunkyCanvas","ChunkyColor")) %>%
  dplyr::arrange(Cluster.Type, Benchmark) %>% 
  add_percent(c("MONO->MONO (!=)", "MONO->MONO (=)"))
block_table_split_transitions_copy <- copy(block_table_split_transitions)

block_table_split_transitions_latex <- kableExtra::kable(block_table_split_transitions %>% select(-Cluster.Type), booktabs = TRUE, align = "r", linesep=c("")) %>% 
  cluster_styling(block_table_split_transitions_copy)

############################################## LATEX MACROS ###############################################
@

\newcolumntype{Y}{>{\raggedleft\arraybackslash}X}

  \def\Metrics{%
    <<Metrics, echo=FALSE, results='asis'>>=
      print(table_one_latex)
    @
  }%

\def\AfterTPCalls{%
  <<AfterTPCalls, echo=FALSE, results='asis'>>=
    print(table_two_calls_latex)
  @
}%

\def\AfterTPSites{%
  <<AfterTPSites, echo=FALSE, results='asis'>>=
    print(table_two_sites_latex)
  @
}%

\def\AfterSplitCalls{%
  <<AfterSplitCalls, echo=FALSE, results='asis'>>=
    print(table_three_calls_latex)
  @
}%

\def\AfterSplitSites{%
  <<AfterSplitSites, echo=FALSE, results='asis'>>=
    print(table_three_sites_latex)
  @
}%

\def\Extent{%
  <<Extent, echo=FALSE, results='asis'>>=
    print(table_four_latex)
  @
}%

\def\SplittingTransitions{%
  <<SplittingTransitions, echo=FALSE, results='asis'>>=
    print(table_split_transitions_latex)
  @
}%

\def\AfterTPCallsMini{%
  <<AfterTPCallsMini, echo=FALSE, results='asis'>>=
    print(table_two_calls_latex_mini)
  @
}%

\def\AfterSplitCallsMini{%
  <<AfterSplitCallsMini, echo=FALSE, results='asis'>>=
    print(table_three_calls_latex_mini)
  @
}%

\def\BlockMetrics{%
    <<BlockMetrics, echo=FALSE, results='asis'>>=
      print(block_table_one_latex)
    @
  }%

\def\BlockExtent{%
    <<BlockExtent, echo=FALSE, results='asis'>>=
      print(block_table_four_latex)
    @
  }%

\def\BlockAfterSplitCallsMini{%
  <<BlockAfterSplitCallsMini, echo=FALSE, results='asis'>>=
    print(block_table_three_calls_latex)
  @
}%

\def\BlockAfterSplitSites{%
  <<BlockAfterSplitSites, echo=FALSE, results='asis'>>=
    print(block_table_three_sites_latex)
  @
}%

\def\BlockSplittingTransitions{%
  <<BlockSplittingTransitions, echo=FALSE, results='asis'>>=
    print(block_table_split_transitions_latex)
  @
}%

\def\Distribution{%
  <<Distribution, echo=FALSE, results='asis'>>=
    print(table_distrib_latex)
  @
}%

\def\BlockDistribution{%
  <<BlockDistribution, echo=FALSE, results='asis'>>=
    print(block_table_distrib_latex)
  @
}%

\def\CallerPolymorphism{%
  <<CallerPolymorphism, echo=FALSE, results='asis'>>=
    print(table_caller_poly_latex)
  @
}%
  
\newcommand{\NumBenchmarks}{$\Sexpr{num_benchmarks}$\xspace}
\newcommand{\MegaBenchs}{$\Sexpr{mega_benchs}$\xspace}
\newcommand{\MedPolyBenchs}{$\Sexpr{med_poly_benchs}$\xspace}
\newcommand{\SmallPolyBenchs}{$\Sexpr{small_poly_benchs}$\xspace}
\newcommand{\NumMonoSites}{$\Sexpr{num_mono_sites}$\xspace}
\newcommand{\NumPolySites}{$\Sexpr{num_poly_sites}$\xspace}
\newcommand{\NumMegaSites}{$\Sexpr{num_mega_sites}$\xspace}
\newcommand{\FreqMonoWoutOutliers}{$\Sexpr{num_mono_wout_outlier}$}

\newcommand{\LowestFnCov}{$\Sexpr{lowest_fn_cov}$}
\newcommand{\HighestFnCov}{$\Sexpr{highest_fn_cov}$}
\newcommand{\LowestLOCCov}{$\Sexpr{lowest_loc_cov}$}
\newcommand{\HighestLOCCov}{$\Sexpr{highest_loc_cov}$}

\newcommand{\LowestTPPoly}{$\Sexpr{abs(lowest_tp_poly_outlier)}$}
\newcommand{\LowestTPPolySecond}{$\Sexpr{abs(lowest_tp_poly_second)}$}
\newcommand{\HighestTPPoly}{$\Sexpr{abs(highest_tp_poly)}$}
\newcommand{\LowestMegaPoly}{$\Sexpr{abs(lowest_tp_mega)}$}
\newcommand{\HighestMegaPoly}{$\Sexpr{abs(highest_tp_mega)}$}

\newcommand{\MinDiv}{$\Sexpr{min_div$result}$\xspace}
\newcommand{\MaxDiv}{$\Sexpr{max_div$result}$}

\newcommand{\BlockLowestPoly}{$\Sexpr{block_lowest_poly_freq$Freq.Poly.Call.Sites[[1]]}$}
\newcommand{\BlockLowestPolySecond}{$\Sexpr{block_lowest_poly_freq_second}$}
\newcommand{\BlockHighestPoly}{$\Sexpr{block_highest_poly_freq$Freq.Poly.Call.Sites}$}
\newcommand{\HighestPoly}{$\Sexpr{highest_poly_freq$Freq.Poly.Call.Sites}$}

\newcommand{\BlockFreqMonoSites}{$\Sexpr{block_perc_mono}$}
\newcommand{\FreqMonoSites}{$\Sexpr{freq_mono_total}$}

\newcommand{\FreqBadSplit}{$\Sexpr{respl}$}
\newcommand{\RatioBlockMeth}{$\Sexpr{ratio_block_meth}$\xspace}

\newcommand{\BigPolyBench}{$\Sexpr{mega_benchs+med_poly_benchs}$}
