%!TEX root = paper.tex
<<knitr-load, echo=FALSE, include=FALSE>>=
if (Sys.getenv("RSTUDIO") == "1") {
    setwd("/home/sopi/Documents/Side_projects/behaviour-analysis/")
} else {
   opts_chunk$set(
    fig.path="./figure/",
    fig.keep='all',
    dev=c('tikz'), #dev='pdf',c('tikz', 'svg'),
    dev.args=list(pointsize=8, timestamp = FALSE),
    echo=FALSE,
    external=FALSE,
    tidy=FALSE)

  ## Make sure that TikZDevice is used for measuring size of latex labels
  options(device = function(...) tikzDevice::tikz(tempfile(), ...))
}

source("./scripts/libraries.R", chdir=TRUE)

#folder_out <- "./results/07-06-22_16-08-09/results/"

############################################## UTILS ###############################################  

load_data_file <- function(filename) {
  row_names <- c("Benchmark", "Before", "After", "Variation", "Type")
  as.data.frame(t(read.csv(filename, sep="\n", strip.white = TRUE, header=FALSE, row.names = row_names)))
}

# add check.names, otherwise it replaces the special characters by ...
load_split_file <- function(filename) {
  read.csv(filename,sep=";", strip.white = TRUE, header=TRUE, fill=TRUE, check.names=FALSE)
}

load_all_tables <- function (folder, type, call_or_site, is_transitions=FALSE) { 
  result <- NULL
  folder <- file.path(folder_out, type, call_or_site)
  files <- sort(list.files(folder))
  
  for (f in files) {
    if (is_transitions) {
      data <- load_split_file(file.path(folder, f))
      
      if (empty(data)) {
        data[1,1] <- str_split(f, "-", simplify = TRUE)[1,1]
      }
      result <- dplyr::union_all(data, result)
      result[is.na(result)] = 0
    }
    else {
      data <- load_data_file(file.path(folder, f))
      result <- rbind(data, result)
    }
  }
  return(result)
}

rearrange_table <- function(df) {
 spec <- tidyr::build_wider_spec(
  df, 
  names_from = Type, 
  values_from = c(Before, After, Variation), 
  names_glue = "{Type}_{.value}")
  
  spec <- spec %>% 
    arrange(factor(.name, levels = c("MONO_Before", "MONO_After", "MONO_Variation", "POLY_Before", "POLY_After", "POLY_Variation", "MEGA_Before", "MEGA_After", "MEGA_Variation") ))
  
  return(tidyr::pivot_wider_spec(df, spec))
}

# Here we'll collapse together: all the PSDUtil, PSDImage, PSDCompose and ChunkyColor
combine_similar_benchmarks <- function(df, benchmark_prefix) {
  table_mean <- df %>%
      filter(str_detect(Benchmark, benchmark_prefix)) %>%
      dplyr::mutate(across(!Benchmark, as.numeric)) %>%
      dplyr::summarise(across(!Benchmark, mean)) %>%
      dplyr::mutate_if(is.numeric, round, 1) %>%
      as.data.frame()
  row.names(table_mean) <- "Mean"
  
  table_sd <- df %>%
      filter(str_detect(Benchmark, benchmark_prefix)) %>%
      dplyr::mutate(across(!Benchmark, as.numeric)) %>%
      dplyr::summarise(across(!Benchmark, sd)) %>%
      dplyr::mutate_if(is.numeric, round, 1) %>%
      as.data.frame()
  row.names(table_sd) <- "SD"
  
  aux_table <- rbind(table_mean, table_sd)
  aux_table[1,]<-paste(aux_table[1,]," (+-",aux_table[2,],")", sep="")
  aux_table <- aux_table[-c(2),]
  
  aux_table$Benchmark <- benchmark_prefix
  row.names(aux_table) <- NULL
  
  df <- df %>% 
    filter(!str_detect(Benchmark, benchmark_prefix))
    
  df <- rbind(df, aux_table)
  
  return(df)
}

build_nice_latex_table <- function(df) {
# trash the data BUT looks exactly how it should for the paper
# see https://stackoverflow.com/questions/13984470/possible-to-create-latex-multicolumns-in-xtable/28420723#28420723
names(df)[2] = names(df)[5] = names(df)[8] = "Before"
names(df)[3] = names(df)[6] = names(df)[9] = "After"
names(df)[4] = names(df)[7] = names(df)[10] = "Variation"
beauty <- kableExtra::kable(df, booktabs = TRUE, linesep = "") %>%
  kableExtra::add_header_above(c("", "MONO"=3, "POLY"=3, "MEGA"=3)) %>%
  kableExtra::kable_styling(latex_options = c("hold_position","scale_down", "striped"))
return(beauty)
}

############################################## MERGED TABLES ############################################### 

data_tp_calls <- load_all_tables(folder_out, "TP", "Calls")
data_tp_call_sites <- load_all_tables(folder_out, "TP", "Call-Sites")

data_split_calls <- load_all_tables(folder_out, "Split", "Calls")
data_split_call_sites <- load_all_tables(folder_out, "TP", "Call-Sites")

data_split_transitions <- load_all_tables(folder_out, "Split", "Transitions", TRUE)
data_split_transitions <- data_split_transitions %>% dplyr::arrange(Transition) %>% rename(Benchmark = Transition)  %>% select(-contains("..."))

# and rearranged
table_data_tp_calls <- rearrange_table(data_tp_calls) %>% dplyr::arrange(Benchmark)
table_data_tp_call_sites <- rearrange_table(data_tp_call_sites) %>% dplyr::arrange(Benchmark)

table_data_split_calls <- rearrange_table(data_split_calls) %>% dplyr::arrange(Benchmark)
table_data_split_call_sites <- rearrange_table(data_split_call_sites) %>% dplyr::arrange(Benchmark)

# Need to merge together the benchmarks with the same behavior
table_data_tp_calls <- combine_similar_benchmarks(table_data_tp_calls, "PsdUtil")
table_data_tp_calls <- combine_similar_benchmarks(table_data_tp_calls, "PsdCompose")
table_data_tp_calls <- combine_similar_benchmarks(table_data_tp_calls, "PsdImage")
table_data_tp_calls <- combine_similar_benchmarks(table_data_tp_calls, "ChunkyCanvas")
table_data_tp_calls <- combine_similar_benchmarks(table_data_tp_calls, "ChunkyColor")  %>% dplyr::arrange(Benchmark)

table_data_tp_call_sites <- combine_similar_benchmarks(table_data_tp_call_sites, "PsdUtil")
table_data_tp_call_sites <- combine_similar_benchmarks(table_data_tp_call_sites, "PsdCompose")
table_data_tp_call_sites <- combine_similar_benchmarks(table_data_tp_call_sites, "PsdImage")
table_data_tp_call_sites <- combine_similar_benchmarks(table_data_tp_call_sites, "ChunkyCanvas")
table_data_tp_call_sites <- combine_similar_benchmarks(table_data_tp_call_sites, "ChunkyColor")  %>% dplyr::arrange(Benchmark)

table_data_split_calls <- combine_similar_benchmarks(table_data_split_calls, "PsdUtil")
table_data_split_calls <- combine_similar_benchmarks(table_data_split_calls, "PsdCompose")
table_data_split_calls <- combine_similar_benchmarks(table_data_split_calls, "PsdImage")
table_data_split_calls <- combine_similar_benchmarks(table_data_split_calls, "ChunkyCanvas")
table_data_split_calls <- combine_similar_benchmarks(table_data_split_calls, "ChunkyColor")  %>% dplyr::arrange(Benchmark)

table_data_split_call_sites <- combine_similar_benchmarks(table_data_split_call_sites, "PsdUtil")
table_data_split_call_sites <- combine_similar_benchmarks(table_data_split_call_sites, "PsdCompose")
table_data_split_call_sites <- combine_similar_benchmarks(table_data_split_call_sites, "PsdImage")
table_data_split_call_sites <- combine_similar_benchmarks(table_data_split_call_sites, "ChunkyCanvas")
table_data_split_call_sites <- combine_similar_benchmarks(table_data_split_call_sites, "ChunkyColor")  %>% dplyr::arrange(Benchmark)

data_split_transitions <- combine_similar_benchmarks(data_split_transitions, "PsdUtil")
data_split_transitions <- combine_similar_benchmarks(data_split_transitions, "PsdCompose")
data_split_transitions <- combine_similar_benchmarks(data_split_transitions, "PsdImage")
data_split_transitions <- combine_similar_benchmarks(data_split_transitions, "ChunkyCanvas")
data_split_transitions <- combine_similar_benchmarks(data_split_transitions, "ChunkyColor")  %>% dplyr::arrange(Benchmark)

# and all latexed
latex_tp_calls <- build_nice_latex_table(table_data_tp_calls)
latex_tp_call_sites <- build_nice_latex_table(table_data_tp_call_sites)

latex_split_calls <- build_nice_latex_table(table_data_split_calls)
latex_split_call_sites <- build_nice_latex_table(table_data_split_call_sites)

latex_data_split_transitions <- kableExtra::kable(data_split_transitions, booktabs = TRUE, linesep = "") %>%
  kableExtra::kable_styling(latex_options = c("hold_position","scale_down", "striped"))

############################################## LATEX COMMAND GENERATION ##############################################

@
\def\SplitCallSites{%
<<SplitCallSites, echo=FALSE, results='asis'>>=
print(latex_split_call_sites)
  @
  }%
  
\def\SplitCalls{%
<<SplitCalls, echo=FALSE, results='asis'>>=
print(latex_split_calls)
  @
  }%

\def\TPCallSites{%
<<TPCallSites, echo=FALSE, results='asis'>>=
print(latex_tp_call_sites)
  @
  }%
  
\def\TPCalls{%
<<TPCalls, echo=FALSE, results='asis'>>=
print(latex_tp_calls)
  @
  }%
  
\def\SplittingTransitions{%
<<SplittingTransitions, echo=FALSE, results='asis'>>=
print(latex_data_split_transitions)
  @
  }%