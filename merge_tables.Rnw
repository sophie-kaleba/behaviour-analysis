%!TEX root = paper.tex
<<knitr-load, echo=FALSE, include=FALSE>>=
  if (Sys.getenv("RSTUDIO") == "1") {
    setwd("/home/sopi/Documents/Side_projects/ruby-cs-analyser/behaviour-analysis/")
  } else {
    opts_chunk$set(
      fig.path="./figure/",
      fig.keep='all',
      dev=c('tikz'), #dev='pdf',c('tikz', 'svg'),
      dev.args=list(pointsize=8, timestamp = FALSE),
      echo=FALSE,
      external=FALSE,
      tidy=FALSE)
    
    ## Make sure that TikZDevice is used for measuring size of latex labels
    options(device = function(...) tikzDevice::tikz(tempfile(), ...))
  }

source("./scripts/libraries.R", chdir=TRUE)
source("./scripts/merge.R", chdir=TRUE)

folder_status <- "../results/11-08-22_18-49-42/"
folder_path = "Methods"

# Coverage data
coverage_data <- load_all_tables(folder_status, FALSE, folder_pattern="Coverage/Global") 
colnames(coverage_data) <- c("Benchmark", "Num.LOC", "LOC.Cov", "Num.Fn", "Fn.Cov")
coverage_data <- rename_benchs(coverage_data, benchs_small_names)

# Behaviour data - General
data <- load_all_tables(folder_status, folder_pattern = file.path(folder_path,"General"), patt="one") %>% replace(is.na(.), 0)
data <- join(coverage_data, data) %>% select(c("Benchmark", "Times.Splitted"), everything())
names(data) <- sub('(\\D+)(\\d+$)', '\\2_\\1', names(data))

# Behaviour data - Splitting transitions
table_split_transitions <- load_all_tables(folder_status, folder_pattern = file.path(folder_path,"General") , patt="split")

table_split_transitions <- table_split_transitions %>%
  dplyr::mutate(`MONO->MONO (!=)` = compute_weight(`MONO->MONO (!=)`, Times.Splitted),
                `MONO->MONO (=)` = compute_weight(`MONO->MONO (=)`, Times.Splitted)) %>%
  select("Benchmark","Times.Splitted", "MONO->MONO (!=)", "MONO->MONO (=)" )

############################################################################################# 
## Processing of the behaviour data to distinguish between the different call-site optimisations

before <- data %>%
  select(1:6, contains("Before"))
names(before) <- sub('(\\d+)_([a-zA-Z]+).(\\D+)_', '\\1_\\3', names(before))
before <- before[ , gtools::mixedsort(names(before))] %>% select(c("Benchmark", "Num.LOC", "LOC.Cov", "Num.Fn", "Fn.Cov", "Times.Splitted"), everything())
before <- sum_poly(before)  

tp <- data %>%
  select(1:6, contains("TP"))
names(tp) <- sub('(\\d+)_([a-zA-Z]+).(\\D+)_', '\\1_\\3', names(tp))
tp <- tp[ , gtools::mixedsort(names(tp))] %>% select(c("Benchmark", "Num.LOC", "LOC.Cov", "Num.Fn", "Fn.Cov", "Times.Splitted"), everything())
tp <- sum_poly(tp)  

splitting <- data %>%
  select(1:6, contains("Split"))
names(splitting) <- sub('(\\d+)_([a-zA-Z]+).(\\D+)_', '\\1_\\3', names(splitting))
splitting <- splitting[ , gtools::mixedsort(names(splitting))] %>% select(c("Benchmark", "Num.LOC", "LOC.Cov", "Num.Fn", "Fn.Cov", "Times.Splitted"), everything())
splitting <- sum_poly(splitting) 

############################################################################################# 
## Build the summary tables
# Build the general metrics table
table_one <- before %>% 
  cluster_benchmarks() %>%
  select(Benchmark, Num.LOC, LOC.Cov, Num.Fn, Fn.Cov, Max.Target, Mono.Call.Sites, Mono.Calls, Poly.Call.Sites, Poly.Calls, Mega.Call.Sites, Mega.Calls, Total.Calls, Freq.Poly.Calls, Total.Call.Sites, Freq.Poly.Call.Sites, Cluster.Type)

# This is required so that the group of benchmark stays the same across all tables
benchmark_types <- table_one %>%
  select(Benchmark, Cluster.Type)

table_before_aux <- build_summary_tables(before, benchmark_types)
table_tp_aux <- build_summary_tables(tp, benchmark_types, "TP_")
table_split_aux <- build_summary_tables(splitting, benchmark_types, "SPLIT_")

# from this table, we can extract Table2, for both calls and call-sites
table_two_aftertp <- table_before_aux %>%
  merge(table_tp_aux) %>%
  #  filter(Poly.Call.Sites > 0) %>% don't summarize just yet, summarize when generating the latex table
  mutate(Change.Mono.Sites = round((100 * (TP_Mono.Call.Sites - `Mono.Call.Sites`)/`Mono.Call.Sites`), 1), 
         Change.Mono.Calls = round((100 * (TP_Mono.Calls - `Mono.Calls`)/`Mono.Calls`),1),
         Change.Poly.Sites = round((100 * (TP_Poly.Call.Sites - Poly.Call.Sites)/Poly.Call.Sites), 1), 
         Change.Poly.Calls = round((100 * (TP_Poly.Calls - Poly.Calls)/Poly.Calls), 1),
         Change.Mega.Sites = round((100 * (TP_Mega.Call.Sites - Mega.Call.Sites)/Mega.Call.Sites), 1), 
         Change.Mega.Calls = round((100 * (TP_Mega.Calls - Mega.Calls)/Mega.Calls), 1))  %>%
  mutate_all(~replace(., is.nan(.), 0)) %>%
  dplyr::arrange(Cluster.Type, Benchmark)

# from this table, we can extract Table3, for both calls and call-sites. Beware, we still need the number of times they have been split
table_three_aftersplit <- table_tp_aux %>%
  merge(table_split_aux) %>%
  #  filter(TP_Poly.Call.Sites > 0) %>% don't summarize just yet, summarize when generating the latex table
  mutate(Change.Mono.Sites = round((100 * (SPLIT_Mono.Call.Sites - `TP_Mono.Call.Sites`)/`TP_Mono.Call.Sites`), 1), 
         Change.Mono.Calls = round((100 * (SPLIT_Mono.Calls - `TP_Mono.Calls`)/`TP_Mono.Calls`),1),
         Change.Poly.Sites = round((100 * (SPLIT_Poly.Call.Sites - TP_Poly.Call.Sites)/TP_Poly.Call.Sites), 1), 
         Change.Poly.Calls = round((100 * (SPLIT_Poly.Calls - TP_Poly.Calls)/TP_Poly.Calls), 1),
         Change.Mega.Sites = round((100 * (SPLIT_Mega.Call.Sites - TP_Mega.Call.Sites)/TP_Mega.Call.Sites), 1), 
         Change.Mega.Calls = round((100 * (SPLIT_Mega.Calls - TP_Mega.Calls)/TP_Mega.Calls), 1)) %>%
  mutate_all(~replace(., is.nan(.), 0)) %>%
  dplyr::arrange(Cluster.Type, Benchmark)

# This table displays to which extent the optimizations impacted polymorphism, this is new from the article
table_four_max <- table_before_aux %>%
  merge(table_tp_aux) %>%
  merge(table_split_aux) %>%
  select(Benchmark, Max.Target, TP_Max.Target, SPLIT_Max.Target) %>%
  merge(benchmark_types, by="Benchmark") 
#  filter(Max.Target > 1) don't summarize just yet, summarize when generating the latex table

############################################## STARTUP ###############################################
# Behaviour data - General
# data_nos <- load_all_tables(folder_status, folder_pattern = file.path(folder_path, "NoStartup","General"), patt="one") %>% 
#   replace(is.na(.), 0)
# data_nos <- combine_similar_benchmarks(data_nos, c("PsdUtil","PsdCompose","PsdImage","ChunkyCanvas","ChunkyColor"))
# data_nos <- join(coverage_data, data_nos) %>% select(c("Benchmark", "Times.Splitted"), everything())
# names(data_nos) <- sub('(\\D+)(\\d+$)', '\\2_\\1', names(data_nos))
# data_nos <- merge(data_nos, benchmark_types, by="Benchmark")
# 
# before_nos <- data_nos %>%
#   select(1:6, contains("Before"))
# names(before_nos) <- sub('(\\d+)_([a-zA-Z]+).(\\D+)_', '\\1_\\3', names(before_nos))
# before_nos <- before_nos[ , gtools::mixedsort(names(before_nos))] %>% select(c("Benchmark", "Num.LOC", "LOC.Cov", "Num.Fn", "Fn.Cov", "Times.Splitted", "Cluste.Type"), everything())
# before_nos <- sum_poly(before_nos)
# 
# tp_nos <- data_nos %>%
#   select(1:6, contains("TP"))
# names(tp_nos) <- sub('(\\d+)_([a-zA-Z]+).(\\D+)_', '\\1_\\3', names(tp_nos))
# tp_nos <- tp_nos[ , gtools::mixedsort(names(tp_nos))] %>% select(c("Benchmark", "Num.LOC", "LOC.Cov", "Num.Fn", "Fn.Cov", "Times.Splitted", "Cluster.Type"), everything())
# tp_nos <- sum_poly(tp_nos) 
# 
# splitting_nos <- data_nos %>%
#   select(1:6, contains("Split"))
# names(splitting_nos) <- sub('(\\d+)_([a-zA-Z]+).(\\D+)_', '\\1_\\3', names(splitting_nos))
# splitting_nos <- splitting_nos[ , gtools::mixedsort(names(splitting_nos))] %>% select(c("Benchmark", "Num.LOC", "LOC.Cov", "Num.Fn", "Fn.Cov", "Times.Splitted", "Cluster.Type"), everything())
# splitting_nos <- sum_poly(splitting_nos)
# 
# # TODO will need to add color
# diff_tp <- (tp %>% select(-Benchmark)) - (tp_nos %>% select(-Benchmark))
# diff_tp$Benchmark <- tp$Benchmark
# 
# diff_split <- (splitting %>% select(-Benchmark)) - (splitting_nos %>% select(-Benchmark))
# diff_split$Benchmark <- tp$Benchmark
# 
# table_before_aux_nos <- before_nos %>%
#   select(Benchmark, Mono.Calls, Mono.Call.Sites, Poly.Calls, Poly.Call.Sites, Mega.Calls, Mega.Call.Sites, Max.Target)
# 
# table_tp_aux_nos <- tp_nos %>%
#   select(Benchmark, Mono.Calls, Mono.Call.Sites, Poly.Calls, Poly.Call.Sites, Mega.Calls, Mega.Call.Sites, Max.Target) %>%
#   rename_with( ~ paste0("TP_", .x), .cols = -Benchmark)
# 
# table_split_aux_nos <- splitting_nos %>%
#   select(Benchmark, Mono.Calls, Mono.Call.Sites, Poly.Calls, Poly.Call.Sites, Mega.Calls, Mega.Call.Sites, Max.Target) %>%
#   rename_with( ~ paste0("SPLIT_", .x), .cols = -c("Benchmark")) 
# 
# table_four_max_nos <- table_before_aux_nos %>%
#   merge(table_tp_aux_nos) %>%
#   merge(table_split_aux_nos) %>%
#   select(Benchmark, Max.Target, TP_Max.Target, SPLIT_Max.Target)
# 
# diff_max <- (table_four_max %>% select(-Benchmark)) - (table_four_max_nos %>% select(-Benchmark))
# diff_max$Benchmark <- table_four_max$Benchmark
# 
# table_one_nos <- before_nos %>%
#   select(Benchmark, Num.LOC, LOC.Cov, Num.Fn, Fn.Cov, Max.Target, Mono.Call.Sites, Mono.Calls, Poly.Call.Sites, Poly.Calls, Mega.Call.Sites, Mega.Calls, Total.Calls, Total.Call.Sites, Freq.Poly.Calls, Freq.Poly.Call.Sites) 

###############################################################################################################

# data_for_plot <- table_four_max %>% tidyr::pivot_longer(!Benchmark, names_to = "Type", values_to="Count") 
# #%>% filter(Benchmark != "BlogRails" & Benchmark != "ERubiRails" & Benchmark != "Sinatra") 
# bar_plot <- ggplot(data_for_plot, aes(x=Benchmark , y=Count, fill = Type)) +  scale_y_log10() +
#   geom_bar(stat = 'identity', position='identity', alpha = 0.5) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) 

############################################## MACROS ###############################################
num_benchmarks <- nrow(coverage_data)
if (num_benchmarks != nrow(data)) {
  exit("Both coverage and behaviour tables should have the same number of rows (1 row = 1 benchmark")
}

mega_benchs <- nrow(table_one %>% filter(Cluster.Type == "Megamorphic"))
med_poly_benchs <- nrow(table_one %>% filter(Cluster.Type == "Polymorphic.Medium"))
small_poly_benchs <- nrow(table_one %>% filter(Cluster.Type == "Polymorphic.Small"))

num_mono_sites <- sum(table_one$Mono.Call.Sites)
num_poly_sites <- sum(table_one$Poly.Call.Sites)
num_mega_sites <- sum(table_one$Mega.Call.Sites)

# fn coverage-related bits
lowest_fn_cov <- table_one %>% arrange(Fn.Cov) %>% head(1)
lowest_fn_cov <- lowest_fn_cov$Fn.Cov

highest_fn_cov <- table_one %>% arrange(desc(Fn.Cov)) %>% head(1)
highest_fn_cov <- highest_fn_cov$Fn.Cov

# loc coverage-related bits
lowest_loc_cov <- table_one %>% arrange(LOC.Cov) %>% head(1)
lowest_loc_cov <- lowest_loc_cov$LOC.Cov

highest_loc_cov <- table_one %>% arrange(desc(LOC.Cov)) %>% head(1)
highest_loc_cov <- highest_loc_cov$LOC.Cov
############################################## LATEX FORMATTING ###############################################
# Format the tables so they can be added in a tex file

table_one <- table_one %>% 
  combine_similar_benchmarks(c("PsdUtil","PsdCompose","PsdImage","ChunkyCanvas","ChunkyColor")) %>% 
  apply_big_numbers(c("Num.LOC", "Num.Fn", "Total.Calls", "Total.Call.Sites")) %>% 
  add_percent(c("Freq.Poly.Calls", "Freq.Poly.Call.Sites", "LOC.Cov", "Fn.Cov")) %>% 
  dplyr::arrange(Cluster.Type, Benchmark)
table_one_copy <- copy(table_one)

table_one_latex <- kableExtra::kable(table_one %>% select(-Max.Target, -Mono.Call.Sites, -Mono.Calls, -Poly.Call.Sites, -Poly.Calls, -Mega.Call.Sites, -Mega.Calls, -Cluster.Type), booktabs = TRUE, align = "r", escape = TRUE, linesep=c("")) %>%
  cluster_styling(table_one_copy)

table_two_aftertp <- table_two_aftertp %>% 
  combine_similar_benchmarks(c("PsdUtil","PsdCompose","PsdImage","ChunkyCanvas","ChunkyColor")) %>% 
  apply_big_numbers(c("Mono.Calls", "Mono.Call.Sites", "Poly.Calls", "Poly.Call.Sites", "Mega.Calls", "Mega.Call.Sites")) %>%
  apply_big_numbers(c("TP_Mono.Calls", "TP_Mono.Call.Sites", "TP_Poly.Calls", "TP_Poly.Call.Sites", "TP_Mega.Calls", "TP_Mega.Call.Sites")) %>%
  add_percent(c("Change.Poly.Call.Sites", "Change.Mega.Call.Sites", "Change.Poly.Calls", "Change.Mega.Calls")) %>% 
  dplyr::arrange(Cluster.Type, Benchmark)
table_two_aftertp_copy <- copy(table_two_aftertp)

table_two_sites_latex <- kableExtra::kable(table_two_aftertp %>% select(-Max.Target, -TP_Max.Target, -contains("Mono"), -contains("Calls"), -contains("TP"), -Cluster.Type), booktabs = TRUE, align = "r", linesep=c(""))  %>%
  cluster_styling(table_two_aftertp_copy)

table_two_calls_latex <- kableExtra::kable(table_two_aftertp %>% select(-Max.Target, -TP_Max.Target, -contains("Mono"), -contains("Sites"), -contains("TP"), -Cluster.Type), booktabs = TRUE, align = "r", linesep=c("")) %>% 
  cluster_styling(table_two_aftertp_copy)

table_three_aftersplit <- table_three_aftersplit %>%
  combine_similar_benchmarks(c("PsdUtil","PsdCompose","PsdImage","ChunkyCanvas","ChunkyColor")) %>% 
  apply_big_numbers(c("TP_Mono.Calls", "TP_Mono.Call.Sites", "TP_Poly.Calls", "TP_Poly.Call.Sites", "TP_Mega.Calls", "TP_Mega.Call.Sites")) %>%
  apply_big_numbers(c("SPLIT_Mono.Calls", "SPLIT_Mono.Call.Sites", "SPLIT_Poly.Calls", "SPLIT_Poly.Call.Sites", "SPLIT_Mega.Calls", "SPLIT_Mega.Call.Sites")) %>% 
  add_percent(c("Change.Poly.Call.Sites", "Change.Mega.Call.Sites", "Change.Poly.Calls", "Change.Mega.Calls")) %>%
  dplyr::arrange(Cluster.Type, Benchmark)
table_three_aftersplit_copy <- copy(table_three_aftersplit)

table_three_sites_latex <- kableExtra::kable(table_three_aftersplit %>% select(-SPLIT_Max.Target, -TP_Max.Target, -contains("Mono"), -contains("Calls"), -contains("SPLIT"), -Cluster.Type), booktabs = TRUE, align = "r", linesep=c("")) %>% 
  cluster_styling(table_three_aftersplit_copy)

table_three_calls_latex <- kableExtra::kable(table_three_aftersplit %>% select(-SPLIT_Max.Target, -TP_Max.Target, -contains("Mono"), -contains("Sites"), -contains("SPLIT"), -Cluster.Type), booktabs = TRUE, align = "r", linesep=c("")) %>% 
  cluster_styling(table_three_aftersplit_copy)

table_four_max <- table_four_max %>%
  combine_similar_benchmarks(c("PsdUtil","PsdCompose","PsdImage","ChunkyCanvas","ChunkyColor")) %>% 
  dplyr::arrange(Cluster.Type, Benchmark)
table_four_max_copy <- copy(table_four_max)

table_four_latex <- kableExtra::kable(table_four_max %>% select(-Cluster.Type), booktabs = TRUE, align = "r", linesep=c("")) %>% 
  cluster_styling(table_four_max_copy)

table_split_transitions <- table_split_transitions %>%
  combine_similar_benchmarks(c("PsdUtil","PsdCompose","PsdImage","ChunkyCanvas","ChunkyColor"), FALSE) %>%
  merge(benchmark_types, by="Benchmark") %>%
  dplyr::arrange(Cluster.Type, Benchmark) %>% 
  add_percent(c("MONO->MONO (!=)", "MONO->MONO (=)"))
table_split_transitions_copy <- copy(table_split_transitions)

table_split_transitions_latex <- kableExtra::kable(table_split_transitions %>% select(-Cluster.Type), booktabs = TRUE, align = "r", linesep=c("")) %>% 
  cluster_styling(table_split_transitions_copy)

############################################## LATEX MACROS ###############################################
@

\newcolumntype{Y}{>{\raggedleft\arraybackslash}X}

  \def\Metrics{%
    <<Metrics, echo=FALSE, results='asis'>>=
      print(table_one_latex)
    @
  }%

\def\AfterTPCalls{%
  <<AfterTPCalls, echo=FALSE, results='asis'>>=
    print(table_two_calls_latex)
  @
}%

\def\AfterTPSites{%
  <<AfterTPSites, echo=FALSE, results='asis'>>=
    print(table_two_sites_latex)
  @
}%

\def\AfterSplitCalls{%
  <<AfterSplitCalls, echo=FALSE, results='asis'>>=
    print(table_three_calls_latex)
  @
}%

\def\AfterSplitSites{%
  <<AfterSplitSites, echo=FALSE, results='asis'>>=
    print(table_three_sites_latex)
  @
}%

\def\Extent{%
  <<Extent, echo=FALSE, results='asis'>>=
    print(table_four_latex)
  @
}%

\def\SplittingTransitions{%
  <<SplittingTransitions, echo=FALSE, results='asis'>>=
    print(table_split_transitions_latex)
  @
}%

\newcommand{\NumBenchmarks}{$\Sexpr{num_benchmarks}$\xspace}
\newcommand{\MegaBenchs}{$\Sexpr{mega_benchs}$\xspace}
\newcommand{\MedPolyBenchs}{$\Sexpr{med_poly_benchs}$\xspace}
\newcommand{\SmallPolyBenchs}{$\Sexpr{small_poly_benchs}$\xspace}
\newcommand{\NumMonoSites}{$\Sexpr{num_mono_sites}$\xspace}
\newcommand{\NumPolySites}{$\Sexpr{num_poly_sites}$\xspace}
\newcommand{\NumMegaSites}{$\Sexpr{num_mega_sites}$\xspace}

\newcommand{\LowestFnCov}{$\Sexpr{lowest_fn_cov}$}
\newcommand{\HighestFnCov}{$\Sexpr{highest_fn_cov}$}
\newcommand{\LowestLOCCov}{$\Sexpr{lowest_loc_cov}$}
\newcommand{\HighestLOCCov}{$\Sexpr{highest_loc_cov}$}